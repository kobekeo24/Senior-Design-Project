/*
 * FreqIO.h
 *
 *  Created on: Jul 21, 2020
 *      Author: monke
 *
 *      This file is dedicated to functions for creating and reading frequencies.
 */

#ifndef SRC_FREQIO_H_
#define SRC_FREQIO_H_
#include "main.h"
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include <assert.h>
#include "math.h"

//Needed uController Objects
//****************************************************************************************************************
extern DAC_HandleTypeDef hdac;
extern DMA_HandleTypeDef hdma_dac1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern UART_HandleTypeDef huart2;
//Connectivity
//****************************************************************************************************************
extern char uartData[3000];

//General Program
//****************************************************************************************************************
/*
 * 	Bool used to determine if in TX or RX mode.
 * 	TX = 1
 * 	RX = 0
 *
 */
extern bool mode;

/*
 * 	Function ran in main
 */
void tx_rx();
void initProgram();
void toggleMode();

/*
 * 	Function to be ran at Tim3 interrupt
 */
void Tim3IT();
/*
 * 	Function to be ran at external trigger.
 */
void FreqCounterPinEXTI();

//GENERATING FREQ
//****************************************************************************************************************
#define TIM2_AUTORELOAD_TX	100			//Timer2 period, used to control DAC and generate audio
#define TIM3_AUTORELOAD_TX	833 		//Timer3 period, used to controller baudrate for TX

#define PI 					3.1415926
#define OUT_AMPL			4096		//Amplitude of outpute wave. 4096 -> 1.65V Peak
#define LOWF_SAMP 			84 			//This is the sample count for the low frequency , as configured maps to 1200Hz
#define HIGHF_SAMP			46			//This is the sample count for the high frequency, as configured maps to 2200Hz

extern bool bitStream[10];

extern uint32_t lowFrequency[2*LOWF_SAMP];		//LUT used to store 2 wavelengths of data for lower frequency
extern uint32_t highFrequency[2*HIGHF_SAMP];	//LUT used to store 2 wavelengths of data for higher frequency

extern bool 	midbit;
extern bool		changeMode;

void edit_sineval(uint32_t *sinArray, int arraySize, int waves);
void bitToAudio(bool *bitStream, int arraySize);
void generateBitstream();
void initOUTData();

//READING FREQ
//****************************************************************************************************************
#define	SAMP_PER_BAUD		2			//Increase sample rate to detect higher frequencies.
#define TIM2_AUTORELOAD_RX	10000		//Timer2 period, used for determining frequency
#define TIM3_AUTORELOAD_RX	833/SAMP_PER_BAUD//Timer3 period, used to trigger periodBuffer fill,dont touch this one.

#define PCONVERT 		10000000		//f = 1/T, used for converting period to frequency
#define HIGHFREQ 		2200			//Higher freq to detect w/ afsk
#define LOWFREQ			1200			//Lower freq to detect w/ afsk
#define FREQDEV			400				//Max potential deviation in target frequency to detect

#define	BUFFER_SCALE		16			//Scalar for buffer base
#define BIT_BUFF_BASE		16			//Base amount of bits to store
#define RX_BUFFERSIZE		SAMP_PER_BAUD * BIT_BUFF_BASE * BUFFER_SCALE

extern uint32_t periodBuffer[RX_BUFFERSIZE];	//Stores the period values from interrupt
extern uint32_t bitBuffer[RX_BUFFERSIZE];		//Stores bitstream values
extern uint8_t	sampusecount;					//Used to determine old data
extern uint16_t periodSaveCount;				//Used to keep track of index to save period
extern uint16_t trackBit;						//Used to keep track of bits being loaded into bit buffer
extern uint16_t bitSaveCount;					//Used to keep track of bit saved to bit buffer

/*
 *	Function to convert freq to bitstream:
 *		returns 1 if detect higher freq within threshold
 *		returns 0 if detect lower freq within threshold
 *		return if frequency is outside afsk set range
 */
int pertobit(uint32_t inputPeriod);
int loadBit();
int* loadByte();
int streamCheck();
void readStream();


#endif /* SRC_FREQIO_H_ */
