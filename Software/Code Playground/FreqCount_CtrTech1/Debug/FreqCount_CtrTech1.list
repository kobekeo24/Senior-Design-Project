
FreqCount_CtrTech1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08005f70  08005f70  00015f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b8  080061b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080061b8  080061b8  000161b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c0  080061c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000112c  20000070  08006238  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08006238  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f02b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000228a  00000000  00000000  0002f0cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  00031358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00032128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022b6b  00000000  00000000  00032de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1f9  00000000  00000000  0005594b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d19f5  00000000  00000000  00060b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000408c  00000000  00000000  001325b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005f54 	.word	0x08005f54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005f54 	.word	0x08005f54

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <get_sineval>:
//Sine Arrays
uint32_t sine_val[100];
uint32_t lowFrequency[LOWF];
uint32_t highFrequency[HIGHF];

void get_sineval(){
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
	for (int i=0;i<100;i++){
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	e03a      	b.n	8000f82 <get_sineval+0x82>
		//formula in DAC Document
		sine_val[i] = ((sin(i*2*PI/100)+1)*(4096/2));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fb27 	bl	8000564 <__aeabi_i2d>
 8000f16:	a322      	add	r3, pc, #136	; (adr r3, 8000fa0 <get_sineval+0xa0>)
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	f7ff fb8c 	bl	8000638 <__aeabi_dmul>
 8000f20:	4603      	mov	r3, r0
 8000f22:	460c      	mov	r4, r1
 8000f24:	4618      	mov	r0, r3
 8000f26:	4621      	mov	r1, r4
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <get_sineval+0x90>)
 8000f2e:	f7ff fcad 	bl	800088c <__aeabi_ddiv>
 8000f32:	4603      	mov	r3, r0
 8000f34:	460c      	mov	r4, r1
 8000f36:	ec44 3b17 	vmov	d7, r3, r4
 8000f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f3e:	eef0 0a67 	vmov.f32	s1, s15
 8000f42:	f003 fff5 	bl	8004f30 <sin>
 8000f46:	ec51 0b10 	vmov	r0, r1, d0
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <get_sineval+0x94>)
 8000f50:	f7ff f9bc 	bl	80002cc <__adddf3>
 8000f54:	4603      	mov	r3, r0
 8000f56:	460c      	mov	r4, r1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <get_sineval+0x98>)
 8000f62:	f7ff fb69 	bl	8000638 <__aeabi_dmul>
 8000f66:	4603      	mov	r3, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	f7ff fe25 	bl	8000bbc <__aeabi_d2uiz>
 8000f72:	4601      	mov	r1, r0
 8000f74:	4a09      	ldr	r2, [pc, #36]	; (8000f9c <get_sineval+0x9c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0;i<100;i++){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b63      	cmp	r3, #99	; 0x63
 8000f86:	ddc1      	ble.n	8000f0c <get_sineval+0xc>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	40590000 	.word	0x40590000
 8000f94:	3ff00000 	.word	0x3ff00000
 8000f98:	40a00000 	.word	0x40a00000
 8000f9c:	20000da8 	.word	0x20000da8
 8000fa0:	4d12d84a 	.word	0x4d12d84a
 8000fa4:	400921fb 	.word	0x400921fb

08000fa8 <edit_sineval>:
void edit_sineval(uint32_t *sinArray,int arraySize){
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	for (int i=0;i<arraySize;i++){
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e040      	b.n	800103a <edit_sineval+0x92>
		//formula in DAC Document
		sinArray[i] = ((sin((i-45)*2*PI/arraySize)+1.1)*(4096/4));
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3b2d      	subs	r3, #45	; 0x2d
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fad0 	bl	8000564 <__aeabi_i2d>
 8000fc4:	a323      	add	r3, pc, #140	; (adr r3, 8001054 <edit_sineval+0xac>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fb35 	bl	8000638 <__aeabi_dmul>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460c      	mov	r4, r1
 8000fd2:	4625      	mov	r5, r4
 8000fd4:	461c      	mov	r4, r3
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f7ff fac4 	bl	8000564 <__aeabi_i2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	f7ff fc52 	bl	800088c <__aeabi_ddiv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	460c      	mov	r4, r1
 8000fec:	ec44 3b17 	vmov	d7, r3, r4
 8000ff0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff4:	eef0 0a67 	vmov.f32	s1, s15
 8000ff8:	f003 ff9a 	bl	8004f30 <sin>
 8000ffc:	ec51 0b10 	vmov	r0, r1, d0
 8001000:	a316      	add	r3, pc, #88	; (adr r3, 800105c <edit_sineval+0xb4>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff f961 	bl	80002cc <__adddf3>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	4618      	mov	r0, r3
 8001010:	4621      	mov	r1, r4
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <edit_sineval+0xa8>)
 8001018:	f7ff fb0e 	bl	8000638 <__aeabi_dmul>
 800101c:	4603      	mov	r3, r0
 800101e:	460c      	mov	r4, r1
 8001020:	4618      	mov	r0, r3
 8001022:	4621      	mov	r1, r4
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	18d4      	adds	r4, r2, r3
 800102c:	f7ff fdc6 	bl	8000bbc <__aeabi_d2uiz>
 8001030:	4603      	mov	r3, r0
 8001032:	6023      	str	r3, [r4, #0]
	for (int i=0;i<arraySize;i++){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	dbba      	blt.n	8000fb8 <edit_sineval+0x10>
	}
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	f3af 8000 	nop.w
 8001050:	40900000 	.word	0x40900000
 8001054:	4d12d84a 	.word	0x4d12d84a
 8001058:	400921fb 	.word	0x400921fb
 800105c:	9999999a 	.word	0x9999999a
 8001060:	3ff19999 	.word	0x3ff19999

08001064 <freqtobit>:
		HAL_Delay(0.5);
		HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
	}
}

int freqtobit(uint32_t inputPeriod){
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	int freq = PCONVERT / (period1+period2);
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <freqtobit+0x28>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <freqtobit+0x2c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4413      	add	r3, r2
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <freqtobit+0x30>)
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	60fb      	str	r3, [r7, #12]
	return freq;
 800107e:	68fb      	ldr	r3, [r7, #12]
//	if( (LOWFREQ-FREQDEV < freq) && (freq < LOWFREQ+FREQDEV) )
//		return 0;
//	else
//		return -1;
//	return freq;
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	200010b8 	.word	0x200010b8
 8001090:	200010d0 	.word	0x200010d0
 8001094:	00989680 	.word	0x00989680

08001098 <FreqCounterPinEXTI>:

void FreqCounterPinEXTI(){
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	if(edge_stamp == 0){
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <FreqCounterPinEXTI+0x6c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10f      	bne.n	80010c4 <FreqCounterPinEXTI+0x2c>
		period1 = 0;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <FreqCounterPinEXTI+0x70>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
		period2 = 0;
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <FreqCounterPinEXTI+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
		htim2.Instance->CNT = 0;
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <FreqCounterPinEXTI+0x78>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
		edge_stamp++;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <FreqCounterPinEXTI+0x6c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3301      	adds	r3, #1
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <FreqCounterPinEXTI+0x6c>)
 80010c0:	6013      	str	r3, [r2, #0]
	}
	else{
		period2 = htim2.Instance->CNT;
		edge_stamp = 0;
	}
}
 80010c2:	e01a      	b.n	80010fa <FreqCounterPinEXTI+0x62>
	else if(edge_stamp == 1) {
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <FreqCounterPinEXTI+0x6c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10e      	bne.n	80010ea <FreqCounterPinEXTI+0x52>
		period1 = htim2.Instance->CNT;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <FreqCounterPinEXTI+0x78>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <FreqCounterPinEXTI+0x70>)
 80010d4:	6013      	str	r3, [r2, #0]
		htim2.Instance->CNT = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <FreqCounterPinEXTI+0x78>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2200      	movs	r2, #0
 80010dc:	625a      	str	r2, [r3, #36]	; 0x24
		edge_stamp++;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <FreqCounterPinEXTI+0x6c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <FreqCounterPinEXTI+0x6c>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	e007      	b.n	80010fa <FreqCounterPinEXTI+0x62>
		period2 = htim2.Instance->CNT;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <FreqCounterPinEXTI+0x78>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <FreqCounterPinEXTI+0x74>)
 80010f2:	6013      	str	r3, [r2, #0]
		edge_stamp = 0;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <FreqCounterPinEXTI+0x6c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	20000090 	.word	0x20000090
 8001108:	200010b8 	.word	0x200010b8
 800110c:	200010d0 	.word	0x200010d0
 8001110:	200010d4 	.word	0x200010d4

08001114 <Tim3IT>:

void Tim3IT(){
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
	periodBuffer[buffLoadCount] = period1+period2;
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <Tim3IT+0x3c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <Tim3IT+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	490d      	ldr	r1, [pc, #52]	; (8001158 <Tim3IT+0x44>)
 8001122:	8809      	ldrh	r1, [r1, #0]
 8001124:	4413      	add	r3, r2
 8001126:	4a0d      	ldr	r2, [pc, #52]	; (800115c <Tim3IT+0x48>)
 8001128:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffLoadCount++;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <Tim3IT+0x44>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <Tim3IT+0x44>)
 8001136:	801a      	strh	r2, [r3, #0]
	if(buffLoadCount>=BUFFERSIZE){
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <Tim3IT+0x44>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2b31      	cmp	r3, #49	; 0x31
 800113e:	d902      	bls.n	8001146 <Tim3IT+0x32>
		buffLoadCount = 0;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <Tim3IT+0x44>)
 8001142:	2200      	movs	r2, #0
 8001144:	801a      	strh	r2, [r3, #0]
	}
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	200010b8 	.word	0x200010b8
 8001154:	200010d0 	.word	0x200010d0
 8001158:	2000008c 	.word	0x2000008c
 800115c:	20000ff0 	.word	0x20000ff0

08001160 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001166:	f000 fbff 	bl	8001968 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800116a:	f000 f871 	bl	8001250 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800116e:	f000 f9cb 	bl	8001508 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001172:	f000 f905 	bl	8001380 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 8001176:	f000 f99d 	bl	80014b4 <MX_USART2_UART_Init>
	MX_DAC_Init();
 800117a:	f000 f8d7 	bl	800132c <MX_DAC_Init>
	MX_TIM3_Init();
 800117e:	f000 f94b 	bl	8001418 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8001182:	482a      	ldr	r0, [pc, #168]	; (800122c <main+0xcc>)
 8001184:	f001 ffb7 	bl	80030f6 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8001188:	4829      	ldr	r0, [pc, #164]	; (8001230 <main+0xd0>)
 800118a:	f001 ffd8 	bl	800313e <HAL_TIM_Base_Start_IT>

	get_sineval();
 800118e:	f7ff feb7 	bl	8000f00 <get_sineval>
	edit_sineval(lowFrequency, LOWF);
 8001192:	2154      	movs	r1, #84	; 0x54
 8001194:	4827      	ldr	r0, [pc, #156]	; (8001234 <main+0xd4>)
 8001196:	f7ff ff07 	bl	8000fa8 <edit_sineval>
	edit_sineval(highFrequency, HIGHF);
 800119a:	212e      	movs	r1, #46	; 0x2e
 800119c:	4826      	ldr	r0, [pc, #152]	; (8001238 <main+0xd8>)
 800119e:	f7ff ff03 	bl	8000fa8 <edit_sineval>
	bool bitStream[10];

	bitStream[0] = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	703b      	strb	r3, [r7, #0]
	bitStream[1] = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	707b      	strb	r3, [r7, #1]
	bitStream[2] = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	70bb      	strb	r3, [r7, #2]
	bitStream[3] = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	70fb      	strb	r3, [r7, #3]
	bitStream[4] = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	713b      	strb	r3, [r7, #4]
	bitStream[5] = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	717b      	strb	r3, [r7, #5]
	bitStream[6] = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	71bb      	strb	r3, [r7, #6]
	bitStream[7] = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
	bitStream[8] = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	723b      	strb	r3, [r7, #8]
	bitStream[9] = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	727b      	strb	r3, [r7, #9]
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, highFrequency, HIGHF,
 80011ca:	2300      	movs	r3, #0
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	232e      	movs	r3, #46	; 0x2e
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <main+0xd8>)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4819      	ldr	r0, [pc, #100]	; (800123c <main+0xdc>)
 80011d6:	f000 fd8f 	bl	8001cf8 <HAL_DAC_Start_DMA>
	DAC_ALIGN_12B_R);
	HAL_Delay(500);
 80011da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011de:	f000 fc35 	bl	8001a4c <HAL_Delay>
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80011e2:	2100      	movs	r1, #0
 80011e4:	4815      	ldr	r0, [pc, #84]	; (800123c <main+0xdc>)
 80011e6:	f000 fe35 	bl	8001e54 <HAL_DAC_Stop_DMA>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		for (int i = 0; i < BUFFERSIZE; i++) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e019      	b.n	8001224 <main+0xc4>
			sprintf(uartData, "Bit value for index %d = %d\r\n", i,
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <main+0xe0>)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff33 	bl	8001064 <freqtobit>
 80011fe:	4603      	mov	r3, r0
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4910      	ldr	r1, [pc, #64]	; (8001244 <main+0xe4>)
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <main+0xe8>)
 8001206:	f003 fa8d 	bl	8004724 <siprintf>
					freqtobit(periodBuffer[i]));
			HAL_UART_Transmit(&huart2, uartData, strlen(uartData), 10);
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <main+0xe8>)
 800120c:	f7ff f800 	bl	8000210 <strlen>
 8001210:	4603      	mov	r3, r0
 8001212:	b29a      	uxth	r2, r3
 8001214:	230a      	movs	r3, #10
 8001216:	490c      	ldr	r1, [pc, #48]	; (8001248 <main+0xe8>)
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <main+0xec>)
 800121a:	f002 fbb2 	bl	8003982 <HAL_UART_Transmit>
		for (int i = 0; i < BUFFERSIZE; i++) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b31      	cmp	r3, #49	; 0x31
 8001228:	dde2      	ble.n	80011f0 <main+0x90>
 800122a:	e7de      	b.n	80011ea <main+0x8a>
 800122c:	200010d4 	.word	0x200010d4
 8001230:	20001154 	.word	0x20001154
 8001234:	200000a0 	.word	0x200000a0
 8001238:	20000f38 	.word	0x20000f38
 800123c:	200010bc 	.word	0x200010bc
 8001240:	20000ff0 	.word	0x20000ff0
 8001244:	08005f70 	.word	0x08005f70
 8001248:	200001f0 	.word	0x200001f0
 800124c:	20001114 	.word	0x20001114

08001250 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	; 0x50
 8001254:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2234      	movs	r2, #52	; 0x34
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fa58 	bl	8004714 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <SystemClock_Config+0xd4>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a29      	ldr	r2, [pc, #164]	; (8001324 <SystemClock_Config+0xd4>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <SystemClock_Config+0xd4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001290:	2300      	movs	r3, #0
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <SystemClock_Config+0xd8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <SystemClock_Config+0xd8>)
 800129e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <SystemClock_Config+0xd8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012b8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ba:	2302      	movs	r3, #2
 80012bc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80012c4:	2304      	movs	r3, #4
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 90;
 80012c8:	235a      	movs	r3, #90	; 0x5a
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012cc:	2302      	movs	r3, #2
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fc85 	bl	8002bec <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x9c>
		Error_Handler();
 80012e8:	f000 f988 	bl	80015fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001302:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	2102      	movs	r1, #2
 800130a:	4618      	mov	r0, r3
 800130c:	f001 f9b4 	bl	8002678 <HAL_RCC_ClockConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <SystemClock_Config+0xca>
		Error_Handler();
 8001316:	f000 f971 	bl	80015fc <Error_Handler>
	}
}
 800131a:	bf00      	nop
 800131c:	3750      	adds	r7, #80	; 0x50
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8001332:	463b      	mov	r3, r7
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_DAC_Init+0x4c>)
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <MX_DAC_Init+0x50>)
 800133e:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <MX_DAC_Init+0x4c>)
 8001342:	f000 fcb6 	bl	8001cb2 <HAL_DAC_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_DAC_Init+0x24>
		Error_Handler();
 800134c:	f000 f956 	bl	80015fc <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001350:	2324      	movs	r3, #36	; 0x24
 8001352:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <MX_DAC_Init+0x4c>)
 8001360:	f000 fdd7 	bl	8001f12 <HAL_DAC_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_DAC_Init+0x42>
		Error_Handler();
 800136a:	f000 f947 	bl	80015fc <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200010bc 	.word	0x200010bc
 800137c:	40007400 	.word	0x40007400

08001380 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_TIM2_Init+0x94>)
 800139e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013a2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 9 - 1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_TIM2_Init+0x94>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_TIM2_Init+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000 - 1;
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_TIM2_Init+0x94>)
 80013b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013b6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_TIM2_Init+0x94>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_TIM2_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80013c4:	4813      	ldr	r0, [pc, #76]	; (8001414 <MX_TIM2_Init+0x94>)
 80013c6:	f001 fe6b 	bl	80030a0 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x54>
		Error_Handler();
 80013d0:	f000 f914 	bl	80015fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <MX_TIM2_Init+0x94>)
 80013e2:	f001 ffd8 	bl	8003396 <HAL_TIM_ConfigClockSource>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x70>
		Error_Handler();
 80013ec:	f000 f906 	bl	80015fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_TIM2_Init+0x94>)
 80013fe:	f002 f9e3 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001408:	f000 f8f8 	bl	80015fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200010d4 	.word	0x200010d4

08001418 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM3_Init+0x94>)
 8001436:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <MX_TIM3_Init+0x98>)
 8001438:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 45 - 1;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM3_Init+0x94>)
 800143c:	222c      	movs	r2, #44	; 0x2c
 800143e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM3_Init+0x94>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0xffff;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_TIM3_Init+0x94>)
 8001448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_TIM3_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_TIM3_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_TIM3_Init+0x94>)
 800145c:	f001 fe20 	bl	80030a0 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x52>
		Error_Handler();
 8001466:	f000 f8c9 	bl	80015fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_TIM3_Init+0x94>)
 8001478:	f001 ff8d 	bl	8003396 <HAL_TIM_ConfigClockSource>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x6e>
		Error_Handler();
 8001482:	f000 f8bb 	bl	80015fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_TIM3_Init+0x94>)
 8001494:	f002 f998 	bl	80037c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800149e:	f000 f8ad 	bl	80015fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20001154 	.word	0x20001154
 80014b0:	40000400 	.word	0x40000400

080014b4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART2_UART_Init+0x4c>)
 80014ec:	f002 f9fc 	bl	80038e8 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80014f6:	f000 f881 	bl	80015fc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20001114 	.word	0x20001114
 8001504:	40004400 	.word	0x40004400

08001508 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_GPIO_Init+0xa4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a21      	ldr	r2, [pc, #132]	; (80015ac <MX_GPIO_Init+0xa4>)
 8001528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <MX_GPIO_Init+0xa4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_GPIO_Init+0xa4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a1a      	ldr	r2, [pc, #104]	; (80015ac <MX_GPIO_Init+0xa4>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_GPIO_Init+0xa4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2120      	movs	r1, #32
 800155a:	4815      	ldr	r0, [pc, #84]	; (80015b0 <MX_GPIO_Init+0xa8>)
 800155c:	f001 f85a 	bl	8002614 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001560:	2301      	movs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_GPIO_Init+0xac>)
 8001566:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4619      	mov	r1, r3
 8001572:	480f      	ldr	r0, [pc, #60]	; (80015b0 <MX_GPIO_Init+0xa8>)
 8001574:	f000 febc 	bl	80022f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001578:	2320      	movs	r3, #32
 800157a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	4619      	mov	r1, r3
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <MX_GPIO_Init+0xa8>)
 8001590:	f000 feae 	bl	80022f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2006      	movs	r0, #6
 800159a:	f000 fb54 	bl	8001c46 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800159e:	2006      	movs	r0, #6
 80015a0:	f000 fb6d 	bl	8001c7e <HAL_NVIC_EnableIRQ>

}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	10310000 	.word	0x10310000

080015b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	if (htim == &htim3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d102      	bne.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x16>
		Tim3IT();
 80015c8:	f7ff fda4 	bl	8001114 <Tim3IT>
	else
		__NOP();
}
 80015cc:	e000      	b.n	80015d0 <HAL_TIM_PeriodElapsedCallback+0x18>
		__NOP();
 80015ce:	bf00      	nop
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20001154 	.word	0x20001154

080015dc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <HAL_GPIO_EXTI_Callback+0x16>
		FreqCounterPinEXTI();
 80015ec:	f7ff fd54 	bl	8001098 <FreqCounterPinEXTI>
	} else
		__NOP();
}
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_EXTI_Callback+0x18>
		__NOP();
 80015f2:	bf00      	nop
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_MspInit+0x4c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800164a:	2007      	movs	r0, #7
 800164c:	f000 faf0 	bl	8001c30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_DAC_MspInit+0x7c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d127      	bne.n	80016ce <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_DAC_MspInit+0x80>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a15      	ldr	r2, [pc, #84]	; (80016dc <HAL_DAC_MspInit+0x80>)
 8001688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_DAC_MspInit+0x80>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <HAL_DAC_MspInit+0x80>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_DAC_MspInit+0x80>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_DAC_MspInit+0x80>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016b6:	2310      	movs	r3, #16
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ba:	2303      	movs	r3, #3
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_DAC_MspInit+0x84>)
 80016ca:	f000 fe11 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40007400 	.word	0x40007400
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	d10e      	bne.n	8001714 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001712:	e01a      	b.n	800174a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_TIM_Base_MspInit+0x74>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d115      	bne.n	800174a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	201d      	movs	r0, #29
 8001740:	f000 fa81 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001744:	201d      	movs	r0, #29
 8001746:	f000 fa9a 	bl	8001c7e <HAL_NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40000400 	.word	0x40000400

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <HAL_UART_MspInit+0x94>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d133      	bne.n	80017e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_UART_MspInit+0x98>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <HAL_UART_MspInit+0x98>)
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_UART_MspInit+0x98>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_UART_MspInit+0x98>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <HAL_UART_MspInit+0x98>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_UART_MspInit+0x98>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b6:	230c      	movs	r3, #12
 80017b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c6:	2307      	movs	r3, #7
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4619      	mov	r1, r3
 80017d0:	4809      	ldr	r0, [pc, #36]	; (80017f8 <HAL_UART_MspInit+0x9c>)
 80017d2:	f000 fd8d 	bl	80022f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2026      	movs	r0, #38	; 0x26
 80017dc:	f000 fa33 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017e0:	2026      	movs	r0, #38	; 0x26
 80017e2:	f000 fa4c 	bl	8001c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40004400 	.word	0x40004400
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 f8dc 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800185c:	2001      	movs	r0, #1
 800185e:	f000 fef3 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <TIM3_IRQHandler+0x10>)
 800186e:	f001 fc8a 	bl	8003186 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20001154 	.word	0x20001154

0800187c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <USART2_IRQHandler+0x10>)
 8001882:	f002 f917 	bl	8003ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20001114 	.word	0x20001114

08001890 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x50>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x16>
		heap_end = &end;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <_sbrk+0x50>)
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <_sbrk+0x54>)
 80018a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <_sbrk+0x50>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <_sbrk+0x50>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	466a      	mov	r2, sp
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d907      	bls.n	80018ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018ba:	f002 ff01 	bl	80046c0 <__errno>
 80018be:	4602      	mov	r2, r0
 80018c0:	230c      	movs	r3, #12
 80018c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	e006      	b.n	80018d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <_sbrk+0x50>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <_sbrk+0x50>)
 80018d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000094 	.word	0x20000094
 80018e4:	200011a0 	.word	0x200011a0

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <SystemInit+0x28>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a07      	ldr	r2, [pc, #28]	; (8001910 <SystemInit+0x28>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <SystemInit+0x28>)
 80018fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001902:	609a      	str	r2, [r3, #8]
#endif
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001918:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800191a:	e003      	b.n	8001924 <LoopCopyDataInit>

0800191c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800191e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001920:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001922:	3104      	adds	r1, #4

08001924 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001928:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800192a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800192c:	d3f6      	bcc.n	800191c <CopyDataInit>
  ldr  r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001930:	e002      	b.n	8001938 <LoopFillZerobss>

08001932 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001932:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001934:	f842 3b04 	str.w	r3, [r2], #4

08001938 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800193a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800193c:	d3f9      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800193e:	f7ff ffd3 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f002 fec3 	bl	80046cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001946:	f7ff fc0b 	bl	8001160 <main>
  bx  lr    
 800194a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001950:	080061c8 	.word	0x080061c8
  ldr  r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001958:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800195c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001960:	2000119c 	.word	0x2000119c

08001964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <HAL_Init+0x40>)
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_Init+0x40>)
 800197e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x40>)
 800198a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f94d 	bl	8001c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fe36 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023c00 	.word	0x40023c00

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f965 	bl	8001c9a <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f92d 	bl	8001c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	20001194 	.word	0x20001194

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20001194 	.word	0x20001194

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_Delay+0x40>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a72:	bf00      	nop
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000008 	.word	0x20000008

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bfc:	d301      	bcc.n	8001c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00f      	b.n	8001c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <SysTick_Config+0x40>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f7ff ff8e 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <SysTick_Config+0x40>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <SysTick_Config+0x40>)
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	e000e010 	.word	0xe000e010

08001c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff29 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c58:	f7ff ff3e 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	f7ff ff8e 	bl	8001b84 <NVIC_EncodePriority>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff5d 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff31 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffa2 	bl	8001bec <SysTick_Config>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e014      	b.n	8001cee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fcc1 	bl	800165c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	795b      	ldrb	r3, [r3, #5]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_DAC_Start_DMA+0x1e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e08e      	b.n	8001e34 <HAL_DAC_Start_DMA+0x13c>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d12a      	bne.n	8001d7e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a43      	ldr	r2, [pc, #268]	; (8001e3c <HAL_DAC_Start_DMA+0x144>)
 8001d2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4a42      	ldr	r2, [pc, #264]	; (8001e40 <HAL_DAC_Start_DMA+0x148>)
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a41      	ldr	r2, [pc, #260]	; (8001e44 <HAL_DAC_Start_DMA+0x14c>)
 8001d3e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d4e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d009      	beq.n	8001d6a <HAL_DAC_Start_DMA+0x72>
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d00c      	beq.n	8001d74 <HAL_DAC_Start_DMA+0x7c>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d000      	beq.n	8001d60 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001d5e:	e039      	b.n	8001dd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3308      	adds	r3, #8
 8001d66:	617b      	str	r3, [r7, #20]
        break;
 8001d68:	e034      	b.n	8001dd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	330c      	adds	r3, #12
 8001d70:	617b      	str	r3, [r7, #20]
        break;
 8001d72:	e02f      	b.n	8001dd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3310      	adds	r3, #16
 8001d7a:	617b      	str	r3, [r7, #20]
        break;
 8001d7c:	e02a      	b.n	8001dd4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	4a31      	ldr	r2, [pc, #196]	; (8001e48 <HAL_DAC_Start_DMA+0x150>)
 8001d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4a30      	ldr	r2, [pc, #192]	; (8001e4c <HAL_DAC_Start_DMA+0x154>)
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <HAL_DAC_Start_DMA+0x158>)
 8001d94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001da4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d009      	beq.n	8001dc0 <HAL_DAC_Start_DMA+0xc8>
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d00c      	beq.n	8001dca <HAL_DAC_Start_DMA+0xd2>
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d000      	beq.n	8001db6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001db4:	e00e      	b.n	8001dd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3314      	adds	r3, #20
 8001dbc:	617b      	str	r3, [r7, #20]
        break;
 8001dbe:	e009      	b.n	8001dd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	617b      	str	r3, [r7, #20]
        break;
 8001dc8:	e004      	b.n	8001dd4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	331c      	adds	r3, #28
 8001dd0:	617b      	str	r3, [r7, #20]
        break;
 8001dd2:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10f      	bne.n	8001dfa <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6898      	ldr	r0, [r3, #8]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	f000 f964 	bl	80020c0 <HAL_DMA_Start_IT>
 8001df8:	e00e      	b.n	8001e18 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e08:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	68d8      	ldr	r0, [r3, #12]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	f000 f954 	bl	80020c0 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	409a      	lsls	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	08001fad 	.word	0x08001fad
 8001e40:	08001fcf 	.word	0x08001fcf
 8001e44:	08001feb 	.word	0x08001feb
 8001e48:	08002055 	.word	0x08002055
 8001e4c:	08002077 	.word	0x08002077
 8001e50:	08002093 	.word	0x08002093

08001e54 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	400a      	ands	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6819      	ldr	r1, [r3, #0]
 8001e82:	2201      	movs	r2, #1
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	400a      	ands	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d107      	bne.n	8001eaa <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f966 	bl	8002170 <HAL_DMA_Abort>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e006      	b.n	8001eb8 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f95e 	bl	8002170 <HAL_DMA_Abort>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	711a      	strb	r2, [r3, #4]
 8001ec4:	e002      	b.n	8001ecc <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	795b      	ldrb	r3, [r3, #5]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_DAC_ConfigChannel+0x20>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e036      	b.n	8001fa0 <HAL_DAC_ConfigChannel+0x8e>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001f64:	693a      	ldr	r2, [r7, #16]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	22c0      	movs	r2, #192	; 0xc0
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	400a      	ands	r2, r1
 8001f90:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb8:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff ff8b 	bl	8001ed6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	711a      	strb	r2, [r3, #4]
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fda:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7ff ff84 	bl	8001eea <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	f043 0204 	orr.w	r2, r3, #4
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f7ff ff7a 	bl	8001efe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	711a      	strb	r2, [r3, #4]
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff ffd8 	bl	8002018 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	711a      	strb	r2, [r3, #4]
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7ff ffd1 	bl	800202c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f043 0204 	orr.w	r2, r3, #4
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff ffc7 	bl	8002040 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	711a      	strb	r2, [r3, #4]
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_DMA_Start_IT+0x26>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e040      	b.n	8002168 <HAL_DMA_Start_IT+0xa8>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d12f      	bne.n	800215a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2202      	movs	r2, #2
 80020fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f8c0 	bl	8002294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	223f      	movs	r2, #63	; 0x3f
 800211a:	409a      	lsls	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0216 	orr.w	r2, r2, #22
 800212e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0208 	orr.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e005      	b.n	8002166 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002166:	7dfb      	ldrb	r3, [r7, #23]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800217e:	f7ff fc59 	bl	8001a34 <HAL_GetTick>
 8002182:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d008      	beq.n	80021a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e052      	b.n	8002248 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0216 	bic.w	r2, r2, #22
 80021b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <HAL_DMA_Abort+0x62>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0208 	bic.w	r2, r2, #8
 80021e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f2:	e013      	b.n	800221c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f4:	f7ff fc1e 	bl	8001a34 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b05      	cmp	r3, #5
 8002200:	d90c      	bls.n	800221c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e015      	b.n	8002248 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e4      	bne.n	80021f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	223f      	movs	r2, #63	; 0x3f
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d004      	beq.n	800226e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00c      	b.n	8002288 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2205      	movs	r2, #5
 8002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d108      	bne.n	80022d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022d2:	e007      	b.n	80022e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e165      	b.n	80025d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800230c:	2201      	movs	r2, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 8154 	bne.w	80025d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d00b      	beq.n	800234a <HAL_GPIO_Init+0x5a>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233e:	2b11      	cmp	r3, #17
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b12      	cmp	r3, #18
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0xfc>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b12      	cmp	r3, #18
 80023ea:	d123      	bne.n	8002434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0203 	and.w	r2, r3, #3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80ae 	beq.w	80025d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b5c      	ldr	r3, [pc, #368]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_GPIO_Init+0x2fc>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002492:	4a57      	ldr	r2, [pc, #348]	; (80025f0 <HAL_GPIO_Init+0x300>)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4e      	ldr	r2, [pc, #312]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x21a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4d      	ldr	r2, [pc, #308]	; (80025f8 <HAL_GPIO_Init+0x308>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x216>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4c      	ldr	r2, [pc, #304]	; (80025fc <HAL_GPIO_Init+0x30c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x212>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4b      	ldr	r2, [pc, #300]	; (8002600 <HAL_GPIO_Init+0x310>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4a      	ldr	r2, [pc, #296]	; (8002604 <HAL_GPIO_Init+0x314>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x20a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a49      	ldr	r2, [pc, #292]	; (8002608 <HAL_GPIO_Init+0x318>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x206>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a48      	ldr	r2, [pc, #288]	; (800260c <HAL_GPIO_Init+0x31c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x202>
 80024ee:	2306      	movs	r3, #6
 80024f0:	e00c      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024f2:	2307      	movs	r3, #7
 80024f4:	e00a      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024f6:	2305      	movs	r3, #5
 80024f8:	e008      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024fa:	2304      	movs	r3, #4
 80024fc:	e006      	b.n	800250c <HAL_GPIO_Init+0x21c>
 80024fe:	2303      	movs	r3, #3
 8002500:	e004      	b.n	800250c <HAL_GPIO_Init+0x21c>
 8002502:	2302      	movs	r3, #2
 8002504:	e002      	b.n	800250c <HAL_GPIO_Init+0x21c>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_GPIO_Init+0x21c>
 800250a:	2300      	movs	r3, #0
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	f002 0203 	and.w	r2, r2, #3
 8002512:	0092      	lsls	r2, r2, #2
 8002514:	4093      	lsls	r3, r2
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800251c:	4934      	ldr	r1, [pc, #208]	; (80025f0 <HAL_GPIO_Init+0x300>)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3302      	adds	r3, #2
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252a:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_GPIO_Init+0x320>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800254e:	4a30      	ldr	r2, [pc, #192]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002554:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_GPIO_Init+0x320>)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_GPIO_Init+0x320>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_GPIO_Init+0x320>)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_GPIO_Init+0x320>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025cc:	4a10      	ldr	r2, [pc, #64]	; (8002610 <HAL_GPIO_Init+0x320>)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3301      	adds	r3, #1
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b0f      	cmp	r3, #15
 80025dc:	f67f ae96 	bls.w	800230c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e0:	bf00      	nop
 80025e2:	3724      	adds	r7, #36	; 0x24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40021400 	.word	0x40021400
 800260c:	40021800 	.word	0x40021800
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe ffb8 	bl	80015dc <HAL_GPIO_EXTI_Callback>
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40013c00 	.word	0x40013c00

08002678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0cc      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b68      	ldr	r3, [pc, #416]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d90c      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b65      	ldr	r3, [pc, #404]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b8      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026cc:	4b59      	ldr	r3, [pc, #356]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e4:	4b53      	ldr	r3, [pc, #332]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a52      	ldr	r2, [pc, #328]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b50      	ldr	r3, [pc, #320]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	494d      	ldr	r1, [pc, #308]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d044      	beq.n	8002798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d119      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d003      	beq.n	8002736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002732:	2b03      	cmp	r3, #3
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b3f      	ldr	r3, [pc, #252]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e067      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4934      	ldr	r1, [pc, #208]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002768:	f7ff f964 	bl	8001a34 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7ff f960 	bl	8001a34 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e04f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 020c 	and.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d20c      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e032      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4916      	ldr	r1, [pc, #88]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	490e      	ldr	r1, [pc, #56]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fe:	f000 f855 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002802:	4601      	mov	r1, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	5cd3      	ldrb	r3, [r2, r3]
 8002812:	fa21 f303 	lsr.w	r3, r1, r3
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff f8c4 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00
 8002834:	40023800 	.word	0x40023800
 8002838:	08005f90 	.word	0x08005f90
 800283c:	20000000 	.word	0x20000000
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_RCC_GetHCLKFreq+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000

0800285c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002860:	f7ff fff0 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 8002864:	4601      	mov	r1, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0a9b      	lsrs	r3, r3, #10
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	08005fa0 	.word	0x08005fa0

08002884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002888:	f7ff ffdc 	bl	8002844 <HAL_RCC_GetHCLKFreq>
 800288c:	4601      	mov	r1, r0
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	0b5b      	lsrs	r3, r3, #13
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4a03      	ldr	r2, [pc, #12]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	08005fa0 	.word	0x08005fa0

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c6:	4bc6      	ldr	r3, [pc, #792]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 030c 	and.w	r3, r3, #12
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	f200 817e 	bhi.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x324>
 80028d4:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <HAL_RCC_GetSysClockFreq+0x30>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	08002911 	.word	0x08002911
 80028e0:	08002bd1 	.word	0x08002bd1
 80028e4:	08002bd1 	.word	0x08002bd1
 80028e8:	08002bd1 	.word	0x08002bd1
 80028ec:	08002917 	.word	0x08002917
 80028f0:	08002bd1 	.word	0x08002bd1
 80028f4:	08002bd1 	.word	0x08002bd1
 80028f8:	08002bd1 	.word	0x08002bd1
 80028fc:	0800291d 	.word	0x0800291d
 8002900:	08002bd1 	.word	0x08002bd1
 8002904:	08002bd1 	.word	0x08002bd1
 8002908:	08002bd1 	.word	0x08002bd1
 800290c:	08002a79 	.word	0x08002a79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4bb4      	ldr	r3, [pc, #720]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x338>)
 8002912:	613b      	str	r3, [r7, #16]
       break;
 8002914:	e15f      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002916:	4bb4      	ldr	r3, [pc, #720]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002918:	613b      	str	r3, [r7, #16]
      break;
 800291a:	e15c      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291c:	4bb0      	ldr	r3, [pc, #704]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002924:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002926:	4bae      	ldr	r3, [pc, #696]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d04a      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	4bab      	ldr	r3, [pc, #684]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	f04f 0400 	mov.w	r4, #0
 800293c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	ea03 0501 	and.w	r5, r3, r1
 8002948:	ea04 0602 	and.w	r6, r4, r2
 800294c:	4629      	mov	r1, r5
 800294e:	4632      	mov	r2, r6
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	f04f 0400 	mov.w	r4, #0
 8002958:	0154      	lsls	r4, r2, #5
 800295a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800295e:	014b      	lsls	r3, r1, #5
 8002960:	4619      	mov	r1, r3
 8002962:	4622      	mov	r2, r4
 8002964:	1b49      	subs	r1, r1, r5
 8002966:	eb62 0206 	sbc.w	r2, r2, r6
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	f04f 0400 	mov.w	r4, #0
 8002972:	0194      	lsls	r4, r2, #6
 8002974:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002978:	018b      	lsls	r3, r1, #6
 800297a:	1a5b      	subs	r3, r3, r1
 800297c:	eb64 0402 	sbc.w	r4, r4, r2
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	00e2      	lsls	r2, r4, #3
 800298a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800298e:	00d9      	lsls	r1, r3, #3
 8002990:	460b      	mov	r3, r1
 8002992:	4614      	mov	r4, r2
 8002994:	195b      	adds	r3, r3, r5
 8002996:	eb44 0406 	adc.w	r4, r4, r6
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	0262      	lsls	r2, r4, #9
 80029a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80029a8:	0259      	lsls	r1, r3, #9
 80029aa:	460b      	mov	r3, r1
 80029ac:	4614      	mov	r4, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	4621      	mov	r1, r4
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f04f 0400 	mov.w	r4, #0
 80029b8:	461a      	mov	r2, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	f7fe f91e 	bl	8000bfc <__aeabi_uldivmod>
 80029c0:	4603      	mov	r3, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	e049      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c8:	4b85      	ldr	r3, [pc, #532]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	099b      	lsrs	r3, r3, #6
 80029ce:	f04f 0400 	mov.w	r4, #0
 80029d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	ea03 0501 	and.w	r5, r3, r1
 80029de:	ea04 0602 	and.w	r6, r4, r2
 80029e2:	4629      	mov	r1, r5
 80029e4:	4632      	mov	r2, r6
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	f04f 0400 	mov.w	r4, #0
 80029ee:	0154      	lsls	r4, r2, #5
 80029f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f4:	014b      	lsls	r3, r1, #5
 80029f6:	4619      	mov	r1, r3
 80029f8:	4622      	mov	r2, r4
 80029fa:	1b49      	subs	r1, r1, r5
 80029fc:	eb62 0206 	sbc.w	r2, r2, r6
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	f04f 0400 	mov.w	r4, #0
 8002a08:	0194      	lsls	r4, r2, #6
 8002a0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a0e:	018b      	lsls	r3, r1, #6
 8002a10:	1a5b      	subs	r3, r3, r1
 8002a12:	eb64 0402 	sbc.w	r4, r4, r2
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	00e2      	lsls	r2, r4, #3
 8002a20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a24:	00d9      	lsls	r1, r3, #3
 8002a26:	460b      	mov	r3, r1
 8002a28:	4614      	mov	r4, r2
 8002a2a:	195b      	adds	r3, r3, r5
 8002a2c:	eb44 0406 	adc.w	r4, r4, r6
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	02a2      	lsls	r2, r4, #10
 8002a3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002a3e:	0299      	lsls	r1, r3, #10
 8002a40:	460b      	mov	r3, r1
 8002a42:	4614      	mov	r4, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	4621      	mov	r1, r4
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f04f 0400 	mov.w	r4, #0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4623      	mov	r3, r4
 8002a52:	f7fe f8d3 	bl	8000bfc <__aeabi_uldivmod>
 8002a56:	4603      	mov	r3, r0
 8002a58:	460c      	mov	r4, r1
 8002a5a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a5c:	4b60      	ldr	r3, [pc, #384]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	0c1b      	lsrs	r3, r3, #16
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	3301      	adds	r3, #1
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	613b      	str	r3, [r7, #16]
      break;
 8002a76:	e0ae      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a78:	4b59      	ldr	r3, [pc, #356]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a80:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a82:	4b57      	ldr	r3, [pc, #348]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d04a      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8e:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	099b      	lsrs	r3, r3, #6
 8002a94:	f04f 0400 	mov.w	r4, #0
 8002a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	ea03 0501 	and.w	r5, r3, r1
 8002aa4:	ea04 0602 	and.w	r6, r4, r2
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	4632      	mov	r2, r6
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	0154      	lsls	r4, r2, #5
 8002ab6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002aba:	014b      	lsls	r3, r1, #5
 8002abc:	4619      	mov	r1, r3
 8002abe:	4622      	mov	r2, r4
 8002ac0:	1b49      	subs	r1, r1, r5
 8002ac2:	eb62 0206 	sbc.w	r2, r2, r6
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	f04f 0400 	mov.w	r4, #0
 8002ace:	0194      	lsls	r4, r2, #6
 8002ad0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ad4:	018b      	lsls	r3, r1, #6
 8002ad6:	1a5b      	subs	r3, r3, r1
 8002ad8:	eb64 0402 	sbc.w	r4, r4, r2
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	00e2      	lsls	r2, r4, #3
 8002ae6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002aea:	00d9      	lsls	r1, r3, #3
 8002aec:	460b      	mov	r3, r1
 8002aee:	4614      	mov	r4, r2
 8002af0:	195b      	adds	r3, r3, r5
 8002af2:	eb44 0406 	adc.w	r4, r4, r6
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	0262      	lsls	r2, r4, #9
 8002b00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002b04:	0259      	lsls	r1, r3, #9
 8002b06:	460b      	mov	r3, r1
 8002b08:	4614      	mov	r4, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f04f 0400 	mov.w	r4, #0
 8002b14:	461a      	mov	r2, r3
 8002b16:	4623      	mov	r3, r4
 8002b18:	f7fe f870 	bl	8000bfc <__aeabi_uldivmod>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e049      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b24:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	f04f 0400 	mov.w	r4, #0
 8002b2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	ea03 0501 	and.w	r5, r3, r1
 8002b3a:	ea04 0602 	and.w	r6, r4, r2
 8002b3e:	4629      	mov	r1, r5
 8002b40:	4632      	mov	r2, r6
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	f04f 0400 	mov.w	r4, #0
 8002b4a:	0154      	lsls	r4, r2, #5
 8002b4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b50:	014b      	lsls	r3, r1, #5
 8002b52:	4619      	mov	r1, r3
 8002b54:	4622      	mov	r2, r4
 8002b56:	1b49      	subs	r1, r1, r5
 8002b58:	eb62 0206 	sbc.w	r2, r2, r6
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	f04f 0400 	mov.w	r4, #0
 8002b64:	0194      	lsls	r4, r2, #6
 8002b66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b6a:	018b      	lsls	r3, r1, #6
 8002b6c:	1a5b      	subs	r3, r3, r1
 8002b6e:	eb64 0402 	sbc.w	r4, r4, r2
 8002b72:	f04f 0100 	mov.w	r1, #0
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b80:	00d9      	lsls	r1, r3, #3
 8002b82:	460b      	mov	r3, r1
 8002b84:	4614      	mov	r4, r2
 8002b86:	195b      	adds	r3, r3, r5
 8002b88:	eb44 0406 	adc.w	r4, r4, r6
 8002b8c:	f04f 0100 	mov.w	r1, #0
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	02a2      	lsls	r2, r4, #10
 8002b96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b9a:	0299      	lsls	r1, r3, #10
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4614      	mov	r4, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f04f 0400 	mov.w	r4, #0
 8002baa:	461a      	mov	r2, r3
 8002bac:	4623      	mov	r3, r4
 8002bae:	f7fe f825 	bl	8000bfc <__aeabi_uldivmod>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	460c      	mov	r4, r1
 8002bb6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x334>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	0f1b      	lsrs	r3, r3, #28
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bcc:	613b      	str	r3, [r7, #16]
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x338>)
 8002bd2:	613b      	str	r3, [r7, #16]
      break;
 8002bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd6:	693b      	ldr	r3, [r7, #16]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002be0:	40023800 	.word	0x40023800
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8083 	beq.w	8002d0c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c06:	4b95      	ldr	r3, [pc, #596]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d019      	beq.n	8002c46 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c12:	4b92      	ldr	r3, [pc, #584]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c1e:	4b8f      	ldr	r3, [pc, #572]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c2a:	d00c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2c:	4b8b      	ldr	r3, [pc, #556]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002c34:	2b0c      	cmp	r3, #12
 8002c36:	d112      	bne.n	8002c5e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c38:	4b88      	ldr	r3, [pc, #544]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c44:	d10b      	bne.n	8002c5e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c46:	4b85      	ldr	r3, [pc, #532]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d05b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x11e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d157      	bne.n	8002d0a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e216      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x8a>
 8002c68:	4b7c      	ldr	r3, [pc, #496]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a7b      	ldr	r2, [pc, #492]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e01d      	b.n	8002cb2 <HAL_RCC_OscConfig+0xc6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7e:	d10c      	bne.n	8002c9a <HAL_RCC_OscConfig+0xae>
 8002c80:	4b76      	ldr	r3, [pc, #472]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a75      	ldr	r2, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	e00b      	b.n	8002cb2 <HAL_RCC_OscConfig+0xc6>
 8002c9a:	4b70      	ldr	r3, [pc, #448]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a6f      	ldr	r2, [pc, #444]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b6d      	ldr	r3, [pc, #436]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a6c      	ldr	r2, [pc, #432]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d013      	beq.n	8002ce2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe febb 	bl	8001a34 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc2:	f7fe feb7 	bl	8001a34 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1db      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd4:	4b61      	ldr	r3, [pc, #388]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0xd6>
 8002ce0:	e014      	b.n	8002d0c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fea7 	bl	8001a34 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cea:	f7fe fea3 	bl	8001a34 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1c7      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfc:	4b57      	ldr	r3, [pc, #348]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0xfe>
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d06f      	beq.n	8002df8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d24:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3c:	4b47      	ldr	r3, [pc, #284]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002d44:	2b0c      	cmp	r3, #12
 8002d46:	d11c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d48:	4b44      	ldr	r3, [pc, #272]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d116      	bne.n	8002d82 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d54:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_OscConfig+0x180>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e18f      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4938      	ldr	r1, [pc, #224]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d80:	e03a      	b.n	8002df8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d020      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe fe50 	bl	8001a34 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fe fe4c 	bl	8001a34 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e170      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0f0      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4925      	ldr	r1, [pc, #148]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
 8002dca:	e015      	b.n	8002df8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_RCC_OscConfig+0x274>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fe2f 	bl	8001a34 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dda:	f7fe fe2b 	bl	8001a34 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e14f      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dec:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f0      	bne.n	8002dda <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d037      	beq.n	8002e74 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d016      	beq.n	8002e3a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe fe0f 	bl	8001a34 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fe0b 	bl	8001a34 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e12f      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <HAL_RCC_OscConfig+0x270>)
 8002e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x22e>
 8002e38:	e01c      	b.n	8002e74 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <HAL_RCC_OscConfig+0x278>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fe fdf8 	bl	8001a34 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e46:	e00f      	b.n	8002e68 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fe fdf4 	bl	8001a34 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d908      	bls.n	8002e68 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e118      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	42470000 	.word	0x42470000
 8002e64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e68:	4b8a      	ldr	r3, [pc, #552]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e9      	bne.n	8002e48 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8097 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e86:	4b83      	ldr	r3, [pc, #524]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	4b7f      	ldr	r3, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a7e      	ldr	r2, [pc, #504]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b7c      	ldr	r3, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b79      	ldr	r3, [pc, #484]	; (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ebe:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fdb3 	bl	8001a34 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7fe fdaf 	bl	8001a34 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e0d3      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee4:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x4ac>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x31a>
 8002ef8:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	e01c      	b.n	8002f40 <HAL_RCC_OscConfig+0x354>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b05      	cmp	r3, #5
 8002f0c:	d10c      	bne.n	8002f28 <HAL_RCC_OscConfig+0x33c>
 8002f0e:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a60      	ldr	r2, [pc, #384]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f14:	f043 0304 	orr.w	r3, r3, #4
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1a:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	4a5d      	ldr	r2, [pc, #372]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f20:	f043 0301 	orr.w	r3, r3, #1
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
 8002f26:	e00b      	b.n	8002f40 <HAL_RCC_OscConfig+0x354>
 8002f28:	4b5a      	ldr	r3, [pc, #360]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	4a59      	ldr	r2, [pc, #356]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6713      	str	r3, [r2, #112]	; 0x70
 8002f34:	4b57      	ldr	r3, [pc, #348]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	4a56      	ldr	r2, [pc, #344]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f3a:	f023 0304 	bic.w	r3, r3, #4
 8002f3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe fd74 	bl	8001a34 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fe fd70 	bl	8001a34 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e092      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	4b4b      	ldr	r3, [pc, #300]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ee      	beq.n	8002f50 <HAL_RCC_OscConfig+0x364>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe fd5e 	bl	8001a34 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fd5a 	bl	8001a34 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e07c      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f92:	4b40      	ldr	r3, [pc, #256]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ee      	bne.n	8002f7c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	4a3a      	ldr	r2, [pc, #232]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d068      	beq.n	800308a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb8:	4b36      	ldr	r3, [pc, #216]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d060      	beq.n	8003086 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d145      	bne.n	8003058 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_RCC_OscConfig+0x4b0>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fd2f 	bl	8001a34 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fda:	f7fe fd2b 	bl	8001a34 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e04f      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f0      	bne.n	8002fda <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	019b      	lsls	r3, r3, #6
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	3b01      	subs	r3, #1
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301a:	061b      	lsls	r3, r3, #24
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	071b      	lsls	r3, r3, #28
 8003024:	491b      	ldr	r1, [pc, #108]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <HAL_RCC_OscConfig+0x4b0>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fd00 	bl	8001a34 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003038:	f7fe fcfc 	bl	8001a34 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e020      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x44c>
 8003056:	e018      	b.n	800308a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_OscConfig+0x4b0>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe fce9 	bl	8001a34 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003066:	f7fe fce5 	bl	8001a34 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e009      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_OscConfig+0x4a8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x47a>
 8003084:	e001      	b.n	800308a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40023800 	.word	0x40023800
 8003098:	40007000 	.word	0x40007000
 800309c:	42470060 	.word	0x42470060

080030a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e01d      	b.n	80030ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fb0c 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 fa38 	bl	8003554 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d007      	beq.n	8003128 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b06      	cmp	r3, #6
 8003166:	d007      	beq.n	8003178 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b02      	cmp	r3, #2
 800319a:	d122      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d11b      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f06f 0202 	mvn.w	r2, #2
 80031b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f9a5 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 80031ce:	e005      	b.n	80031dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f997 	bl	8003504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f9a8 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d122      	bne.n	8003236 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d11b      	bne.n	8003236 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0204 	mvn.w	r2, #4
 8003206:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f97b 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 8003222:	e005      	b.n	8003230 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f96d 	bl	8003504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f97e 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d122      	bne.n	800328a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b08      	cmp	r3, #8
 8003250:	d11b      	bne.n	800328a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0208 	mvn.w	r2, #8
 800325a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2204      	movs	r2, #4
 8003260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f951 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 8003276:	e005      	b.n	8003284 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f943 	bl	8003504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f954 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d122      	bne.n	80032de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d11b      	bne.n	80032de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f06f 0210 	mvn.w	r2, #16
 80032ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2208      	movs	r2, #8
 80032b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f927 	bl	8003518 <HAL_TIM_IC_CaptureCallback>
 80032ca:	e005      	b.n	80032d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f919 	bl	8003504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f92a 	bl	800352c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10e      	bne.n	800330a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f06f 0201 	mvn.w	r2, #1
 8003302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7fe f957 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d10e      	bne.n	8003336 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b80      	cmp	r3, #128	; 0x80
 8003324:	d107      	bne.n	8003336 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800332e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 facf 	bl	80038d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b40      	cmp	r3, #64	; 0x40
 8003342:	d10e      	bne.n	8003362 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d107      	bne.n	8003362 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800335a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8ef 	bl	8003540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b20      	cmp	r3, #32
 800336e:	d10e      	bne.n	800338e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	2b20      	cmp	r3, #32
 800337c:	d107      	bne.n	800338e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f06f 0220 	mvn.w	r2, #32
 8003386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fa99 	bl	80038c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_TIM_ConfigClockSource+0x18>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e0a6      	b.n	80034fc <HAL_TIM_ConfigClockSource+0x166>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d067      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x120>
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d80b      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x6c>
 80033ea:	2b10      	cmp	r3, #16
 80033ec:	d073      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x140>
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d802      	bhi.n	80033f8 <HAL_TIM_ConfigClockSource+0x62>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d06f      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033f6:	e078      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d06c      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x140>
 80033fc:	2b30      	cmp	r3, #48	; 0x30
 80033fe:	d06a      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003400:	e073      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003402:	2b70      	cmp	r3, #112	; 0x70
 8003404:	d00d      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x8c>
 8003406:	2b70      	cmp	r3, #112	; 0x70
 8003408:	d804      	bhi.n	8003414 <HAL_TIM_ConfigClockSource+0x7e>
 800340a:	2b50      	cmp	r3, #80	; 0x50
 800340c:	d033      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xe0>
 800340e:	2b60      	cmp	r3, #96	; 0x60
 8003410:	d041      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003412:	e06a      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003418:	d066      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0x152>
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	d017      	beq.n	8003450 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003420:	e063      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f000 f9a9 	bl	8003788 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003444:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	609a      	str	r2, [r3, #8]
      break;
 800344e:	e04c      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6899      	ldr	r1, [r3, #8]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f000 f992 	bl	8003788 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003472:	609a      	str	r2, [r3, #8]
      break;
 8003474:	e039      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	461a      	mov	r2, r3
 8003484:	f000 f906 	bl	8003694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2150      	movs	r1, #80	; 0x50
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f95f 	bl	8003752 <TIM_ITRx_SetConfig>
      break;
 8003494:	e029      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f000 f925 	bl	80036f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2160      	movs	r1, #96	; 0x60
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f94f 	bl	8003752 <TIM_ITRx_SetConfig>
      break;
 80034b4:	e019      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f000 f8e6 	bl	8003694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2140      	movs	r1, #64	; 0x40
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f93f 	bl	8003752 <TIM_ITRx_SetConfig>
      break;
 80034d4:	e009      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4619      	mov	r1, r3
 80034e0:	4610      	mov	r0, r2
 80034e2:	f000 f936 	bl	8003752 <TIM_ITRx_SetConfig>
      break;
 80034e6:	e000      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a40      	ldr	r2, [pc, #256]	; (8003668 <TIM_Base_SetConfig+0x114>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003572:	d00f      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3d      	ldr	r2, [pc, #244]	; (800366c <TIM_Base_SetConfig+0x118>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3c      	ldr	r2, [pc, #240]	; (8003670 <TIM_Base_SetConfig+0x11c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d007      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <TIM_Base_SetConfig+0x120>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3a      	ldr	r2, [pc, #232]	; (8003678 <TIM_Base_SetConfig+0x124>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d108      	bne.n	80035a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2f      	ldr	r2, [pc, #188]	; (8003668 <TIM_Base_SetConfig+0x114>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d02b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b4:	d027      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	; (800366c <TIM_Base_SetConfig+0x118>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d023      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <TIM_Base_SetConfig+0x11c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d01f      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a2a      	ldr	r2, [pc, #168]	; (8003674 <TIM_Base_SetConfig+0x120>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a29      	ldr	r2, [pc, #164]	; (8003678 <TIM_Base_SetConfig+0x124>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d017      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <TIM_Base_SetConfig+0x128>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <TIM_Base_SetConfig+0x12c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00f      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a26      	ldr	r2, [pc, #152]	; (8003684 <TIM_Base_SetConfig+0x130>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00b      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a25      	ldr	r2, [pc, #148]	; (8003688 <TIM_Base_SetConfig+0x134>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <TIM_Base_SetConfig+0x138>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a23      	ldr	r2, [pc, #140]	; (8003690 <TIM_Base_SetConfig+0x13c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d108      	bne.n	8003618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <TIM_Base_SetConfig+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0xf8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <TIM_Base_SetConfig+0x124>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d103      	bne.n	8003654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	615a      	str	r2, [r3, #20]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40010400 	.word	0x40010400
 800367c:	40014000 	.word	0x40014000
 8003680:	40014400 	.word	0x40014400
 8003684:	40014800 	.word	0x40014800
 8003688:	40001800 	.word	0x40001800
 800368c:	40001c00 	.word	0x40001c00
 8003690:	40002000 	.word	0x40002000

08003694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f023 030a 	bic.w	r3, r3, #10
 80036d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b087      	sub	sp, #28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800371c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	031b      	lsls	r3, r3, #12
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800372e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003752:	b480      	push	{r7}
 8003754:	b085      	sub	sp, #20
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	f043 0307 	orr.w	r3, r3, #7
 8003774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	021a      	lsls	r2, r3, #8
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	609a      	str	r2, [r3, #8]
}
 80037bc:	bf00      	nop
 80037be:	371c      	adds	r7, #28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037dc:	2302      	movs	r3, #2
 80037de:	e05a      	b.n	8003896 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d022      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d01d      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d018      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a17      	ldr	r2, [pc, #92]	; (80038b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a15      	ldr	r2, [pc, #84]	; (80038bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10c      	bne.n	8003884 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4313      	orrs	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40010400 	.word	0x40010400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	40001800 	.word	0x40001800

080038c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e03f      	b.n	800397a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7fd ff24 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800392a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fb4b 	bl	8003fc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691a      	ldr	r2, [r3, #16]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b088      	sub	sp, #32
 8003986:	af02      	add	r7, sp, #8
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b20      	cmp	r3, #32
 80039a0:	f040 8083 	bne.w	8003aaa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_UART_Transmit+0x2e>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e07b      	b.n	8003aac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Transmit+0x40>
 80039be:	2302      	movs	r3, #2
 80039c0:	e074      	b.n	8003aac <HAL_UART_Transmit+0x12a>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2221      	movs	r2, #33	; 0x21
 80039d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80039d8:	f7fe f82c 	bl	8001a34 <HAL_GetTick>
 80039dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	88fa      	ldrh	r2, [r7, #6]
 80039e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80039f2:	e042      	b.n	8003a7a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0a:	d122      	bne.n	8003a52 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f96a 	bl	8003cf0 <UART_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e042      	b.n	8003aac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a38:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	3302      	adds	r3, #2
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	e017      	b.n	8003a7a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	60bb      	str	r3, [r7, #8]
 8003a50:	e013      	b.n	8003a7a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f947 	bl	8003cf0 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e01f      	b.n	8003aac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	60ba      	str	r2, [r7, #8]
 8003a72:	781a      	ldrb	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1b7      	bne.n	80039f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f92e 	bl	8003cf0 <UART_WaitOnFlagUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e006      	b.n	8003aac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e000      	b.n	8003aac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_UART_IRQHandler+0x52>
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f9e0 	bl	8003ec4 <UART_Receive_IT>
      return;
 8003b04:	e0d1      	b.n	8003caa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80b0 	beq.w	8003c6e <HAL_UART_IRQHandler+0x1ba>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d105      	bne.n	8003b24 <HAL_UART_IRQHandler+0x70>
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a5 	beq.w	8003c6e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_UART_IRQHandler+0x90>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	f043 0201 	orr.w	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_UART_IRQHandler+0xb0>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	f043 0202 	orr.w	r2, r3, #2
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_UART_IRQHandler+0xd0>
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	f043 0204 	orr.w	r2, r3, #4
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00f      	beq.n	8003bae <HAL_UART_IRQHandler+0xfa>
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <HAL_UART_IRQHandler+0xee>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d005      	beq.n	8003bae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba6:	f043 0208 	orr.w	r2, r3, #8
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d078      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x11c>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f97a 	bl	8003ec4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	bf0c      	ite	eq
 8003bde:	2301      	moveq	r3, #1
 8003be0:	2300      	movne	r3, #0
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d102      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x144>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d031      	beq.n	8003c5c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f8c3 	bl	8003d84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b40      	cmp	r3, #64	; 0x40
 8003c0a:	d123      	bne.n	8003c54 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c1a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d013      	beq.n	8003c4c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c28:	4a21      	ldr	r2, [pc, #132]	; (8003cb0 <HAL_UART_IRQHandler+0x1fc>)
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fb0d 	bl	8002250 <HAL_DMA_Abort_IT>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d016      	beq.n	8003c6a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c46:	4610      	mov	r0, r2
 8003c48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4a:	e00e      	b.n	8003c6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 f845 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c52:	e00a      	b.n	8003c6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f841 	bl	8003cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5a:	e006      	b.n	8003c6a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f83d 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c68:	e01e      	b.n	8003ca8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6a:	bf00      	nop
    return;
 8003c6c:	e01c      	b.n	8003ca8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1d6>
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8b0 	bl	8003de8 <UART_Transmit_IT>
    return;
 8003c88:	e00f      	b.n	8003caa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_UART_IRQHandler+0x1f6>
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f8f8 	bl	8003e94 <UART_EndTransmit_IT>
    return;
 8003ca4:	bf00      	nop
 8003ca6:	e000      	b.n	8003caa <HAL_UART_IRQHandler+0x1f6>
    return;
 8003ca8:	bf00      	nop
  }
}
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	08003dc1 	.word	0x08003dc1

08003cb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d00:	e02c      	b.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d028      	beq.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d007      	beq.n	8003d20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d10:	f7fd fe90 	bl	8001a34 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d21d      	bcs.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2220      	movs	r2, #32
 8003d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e00f      	b.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4013      	ands	r3, r2
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d0c3      	beq.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0201 	bic.w	r2, r2, #1
 8003daa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f7ff ff7e 	bl	8003cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de0:	bf00      	nop
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b21      	cmp	r3, #33	; 0x21
 8003dfa:	d144      	bne.n	8003e86 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e04:	d11a      	bne.n	8003e3c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e1a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d105      	bne.n	8003e30 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	1c9a      	adds	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	621a      	str	r2, [r3, #32]
 8003e2e:	e00e      	b.n	8003e4e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	621a      	str	r2, [r3, #32]
 8003e3a:	e008      	b.n	8003e4e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	1c59      	adds	r1, r3, #1
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6211      	str	r1, [r2, #32]
 8003e46:	781a      	ldrb	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e000      	b.n	8003e88 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
  }
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fefd 	bl	8003cb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b22      	cmp	r3, #34	; 0x22
 8003ed6:	d171      	bne.n	8003fbc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee0:	d123      	bne.n	8003f2a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10e      	bne.n	8003f0e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	1c9a      	adds	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f0c:	e029      	b.n	8003f62 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28
 8003f28:	e01b      	b.n	8003f62 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6858      	ldr	r0, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	1c59      	adds	r1, r3, #1
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6291      	str	r1, [r2, #40]	; 0x28
 8003f42:	b2c2      	uxtb	r2, r0
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	e00c      	b.n	8003f62 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	1c58      	adds	r0, r3, #1
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	6288      	str	r0, [r1, #40]	; 0x28
 8003f5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d120      	bne.n	8003fb8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0220 	bic.w	r2, r2, #32
 8003f84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fe8a 	bl	8003cc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	e002      	b.n	8003fbe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800400a:	f023 030c 	bic.w	r3, r3, #12
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	430b      	orrs	r3, r1
 8004016:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004036:	f040 818b 	bne.w	8004350 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4ac1      	ldr	r2, [pc, #772]	; (8004344 <UART_SetConfig+0x37c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d005      	beq.n	8004050 <UART_SetConfig+0x88>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4abf      	ldr	r2, [pc, #764]	; (8004348 <UART_SetConfig+0x380>)
 800404a:	4293      	cmp	r3, r2
 800404c:	f040 80bd 	bne.w	80041ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fe fc18 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 8004054:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	461d      	mov	r5, r3
 800405a:	f04f 0600 	mov.w	r6, #0
 800405e:	46a8      	mov	r8, r5
 8004060:	46b1      	mov	r9, r6
 8004062:	eb18 0308 	adds.w	r3, r8, r8
 8004066:	eb49 0409 	adc.w	r4, r9, r9
 800406a:	4698      	mov	r8, r3
 800406c:	46a1      	mov	r9, r4
 800406e:	eb18 0805 	adds.w	r8, r8, r5
 8004072:	eb49 0906 	adc.w	r9, r9, r6
 8004076:	f04f 0100 	mov.w	r1, #0
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004082:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004086:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800408a:	4688      	mov	r8, r1
 800408c:	4691      	mov	r9, r2
 800408e:	eb18 0005 	adds.w	r0, r8, r5
 8004092:	eb49 0106 	adc.w	r1, r9, r6
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	461d      	mov	r5, r3
 800409c:	f04f 0600 	mov.w	r6, #0
 80040a0:	196b      	adds	r3, r5, r5
 80040a2:	eb46 0406 	adc.w	r4, r6, r6
 80040a6:	461a      	mov	r2, r3
 80040a8:	4623      	mov	r3, r4
 80040aa:	f7fc fda7 	bl	8000bfc <__aeabi_uldivmod>
 80040ae:	4603      	mov	r3, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	461a      	mov	r2, r3
 80040b4:	4ba5      	ldr	r3, [pc, #660]	; (800434c <UART_SetConfig+0x384>)
 80040b6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	461d      	mov	r5, r3
 80040c4:	f04f 0600 	mov.w	r6, #0
 80040c8:	46a9      	mov	r9, r5
 80040ca:	46b2      	mov	sl, r6
 80040cc:	eb19 0309 	adds.w	r3, r9, r9
 80040d0:	eb4a 040a 	adc.w	r4, sl, sl
 80040d4:	4699      	mov	r9, r3
 80040d6:	46a2      	mov	sl, r4
 80040d8:	eb19 0905 	adds.w	r9, r9, r5
 80040dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80040e0:	f04f 0100 	mov.w	r1, #0
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040f4:	4689      	mov	r9, r1
 80040f6:	4692      	mov	sl, r2
 80040f8:	eb19 0005 	adds.w	r0, r9, r5
 80040fc:	eb4a 0106 	adc.w	r1, sl, r6
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	461d      	mov	r5, r3
 8004106:	f04f 0600 	mov.w	r6, #0
 800410a:	196b      	adds	r3, r5, r5
 800410c:	eb46 0406 	adc.w	r4, r6, r6
 8004110:	461a      	mov	r2, r3
 8004112:	4623      	mov	r3, r4
 8004114:	f7fc fd72 	bl	8000bfc <__aeabi_uldivmod>
 8004118:	4603      	mov	r3, r0
 800411a:	460c      	mov	r4, r1
 800411c:	461a      	mov	r2, r3
 800411e:	4b8b      	ldr	r3, [pc, #556]	; (800434c <UART_SetConfig+0x384>)
 8004120:	fba3 1302 	umull	r1, r3, r3, r2
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	2164      	movs	r1, #100	; 0x64
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	3332      	adds	r3, #50	; 0x32
 8004132:	4a86      	ldr	r2, [pc, #536]	; (800434c <UART_SetConfig+0x384>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004140:	4498      	add	r8, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	461d      	mov	r5, r3
 8004146:	f04f 0600 	mov.w	r6, #0
 800414a:	46a9      	mov	r9, r5
 800414c:	46b2      	mov	sl, r6
 800414e:	eb19 0309 	adds.w	r3, r9, r9
 8004152:	eb4a 040a 	adc.w	r4, sl, sl
 8004156:	4699      	mov	r9, r3
 8004158:	46a2      	mov	sl, r4
 800415a:	eb19 0905 	adds.w	r9, r9, r5
 800415e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800416e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004172:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004176:	4689      	mov	r9, r1
 8004178:	4692      	mov	sl, r2
 800417a:	eb19 0005 	adds.w	r0, r9, r5
 800417e:	eb4a 0106 	adc.w	r1, sl, r6
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	461d      	mov	r5, r3
 8004188:	f04f 0600 	mov.w	r6, #0
 800418c:	196b      	adds	r3, r5, r5
 800418e:	eb46 0406 	adc.w	r4, r6, r6
 8004192:	461a      	mov	r2, r3
 8004194:	4623      	mov	r3, r4
 8004196:	f7fc fd31 	bl	8000bfc <__aeabi_uldivmod>
 800419a:	4603      	mov	r3, r0
 800419c:	460c      	mov	r4, r1
 800419e:	461a      	mov	r2, r3
 80041a0:	4b6a      	ldr	r3, [pc, #424]	; (800434c <UART_SetConfig+0x384>)
 80041a2:	fba3 1302 	umull	r1, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2164      	movs	r1, #100	; 0x64
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a65      	ldr	r2, [pc, #404]	; (800434c <UART_SetConfig+0x384>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 0207 	and.w	r2, r3, #7
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4442      	add	r2, r8
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	e26f      	b.n	80046aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ca:	f7fe fb47 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 80041ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	461d      	mov	r5, r3
 80041d4:	f04f 0600 	mov.w	r6, #0
 80041d8:	46a8      	mov	r8, r5
 80041da:	46b1      	mov	r9, r6
 80041dc:	eb18 0308 	adds.w	r3, r8, r8
 80041e0:	eb49 0409 	adc.w	r4, r9, r9
 80041e4:	4698      	mov	r8, r3
 80041e6:	46a1      	mov	r9, r4
 80041e8:	eb18 0805 	adds.w	r8, r8, r5
 80041ec:	eb49 0906 	adc.w	r9, r9, r6
 80041f0:	f04f 0100 	mov.w	r1, #0
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80041fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004200:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004204:	4688      	mov	r8, r1
 8004206:	4691      	mov	r9, r2
 8004208:	eb18 0005 	adds.w	r0, r8, r5
 800420c:	eb49 0106 	adc.w	r1, r9, r6
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	461d      	mov	r5, r3
 8004216:	f04f 0600 	mov.w	r6, #0
 800421a:	196b      	adds	r3, r5, r5
 800421c:	eb46 0406 	adc.w	r4, r6, r6
 8004220:	461a      	mov	r2, r3
 8004222:	4623      	mov	r3, r4
 8004224:	f7fc fcea 	bl	8000bfc <__aeabi_uldivmod>
 8004228:	4603      	mov	r3, r0
 800422a:	460c      	mov	r4, r1
 800422c:	461a      	mov	r2, r3
 800422e:	4b47      	ldr	r3, [pc, #284]	; (800434c <UART_SetConfig+0x384>)
 8004230:	fba3 2302 	umull	r2, r3, r3, r2
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	461d      	mov	r5, r3
 800423e:	f04f 0600 	mov.w	r6, #0
 8004242:	46a9      	mov	r9, r5
 8004244:	46b2      	mov	sl, r6
 8004246:	eb19 0309 	adds.w	r3, r9, r9
 800424a:	eb4a 040a 	adc.w	r4, sl, sl
 800424e:	4699      	mov	r9, r3
 8004250:	46a2      	mov	sl, r4
 8004252:	eb19 0905 	adds.w	r9, r9, r5
 8004256:	eb4a 0a06 	adc.w	sl, sl, r6
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004266:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800426a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800426e:	4689      	mov	r9, r1
 8004270:	4692      	mov	sl, r2
 8004272:	eb19 0005 	adds.w	r0, r9, r5
 8004276:	eb4a 0106 	adc.w	r1, sl, r6
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	461d      	mov	r5, r3
 8004280:	f04f 0600 	mov.w	r6, #0
 8004284:	196b      	adds	r3, r5, r5
 8004286:	eb46 0406 	adc.w	r4, r6, r6
 800428a:	461a      	mov	r2, r3
 800428c:	4623      	mov	r3, r4
 800428e:	f7fc fcb5 	bl	8000bfc <__aeabi_uldivmod>
 8004292:	4603      	mov	r3, r0
 8004294:	460c      	mov	r4, r1
 8004296:	461a      	mov	r2, r3
 8004298:	4b2c      	ldr	r3, [pc, #176]	; (800434c <UART_SetConfig+0x384>)
 800429a:	fba3 1302 	umull	r1, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2164      	movs	r1, #100	; 0x64
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	3332      	adds	r3, #50	; 0x32
 80042ac:	4a27      	ldr	r2, [pc, #156]	; (800434c <UART_SetConfig+0x384>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ba:	4498      	add	r8, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	461d      	mov	r5, r3
 80042c0:	f04f 0600 	mov.w	r6, #0
 80042c4:	46a9      	mov	r9, r5
 80042c6:	46b2      	mov	sl, r6
 80042c8:	eb19 0309 	adds.w	r3, r9, r9
 80042cc:	eb4a 040a 	adc.w	r4, sl, sl
 80042d0:	4699      	mov	r9, r3
 80042d2:	46a2      	mov	sl, r4
 80042d4:	eb19 0905 	adds.w	r9, r9, r5
 80042d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80042dc:	f04f 0100 	mov.w	r1, #0
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042f0:	4689      	mov	r9, r1
 80042f2:	4692      	mov	sl, r2
 80042f4:	eb19 0005 	adds.w	r0, r9, r5
 80042f8:	eb4a 0106 	adc.w	r1, sl, r6
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	461d      	mov	r5, r3
 8004302:	f04f 0600 	mov.w	r6, #0
 8004306:	196b      	adds	r3, r5, r5
 8004308:	eb46 0406 	adc.w	r4, r6, r6
 800430c:	461a      	mov	r2, r3
 800430e:	4623      	mov	r3, r4
 8004310:	f7fc fc74 	bl	8000bfc <__aeabi_uldivmod>
 8004314:	4603      	mov	r3, r0
 8004316:	460c      	mov	r4, r1
 8004318:	461a      	mov	r2, r3
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <UART_SetConfig+0x384>)
 800431c:	fba3 1302 	umull	r1, r3, r3, r2
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	2164      	movs	r1, #100	; 0x64
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	3332      	adds	r3, #50	; 0x32
 800432e:	4a07      	ldr	r2, [pc, #28]	; (800434c <UART_SetConfig+0x384>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	f003 0207 	and.w	r2, r3, #7
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4442      	add	r2, r8
 8004340:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004342:	e1b2      	b.n	80046aa <UART_SetConfig+0x6e2>
 8004344:	40011000 	.word	0x40011000
 8004348:	40011400 	.word	0x40011400
 800434c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4ad7      	ldr	r2, [pc, #860]	; (80046b4 <UART_SetConfig+0x6ec>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d005      	beq.n	8004366 <UART_SetConfig+0x39e>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4ad6      	ldr	r2, [pc, #856]	; (80046b8 <UART_SetConfig+0x6f0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	f040 80d1 	bne.w	8004508 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004366:	f7fe fa8d 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 800436a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	469a      	mov	sl, r3
 8004370:	f04f 0b00 	mov.w	fp, #0
 8004374:	46d0      	mov	r8, sl
 8004376:	46d9      	mov	r9, fp
 8004378:	eb18 0308 	adds.w	r3, r8, r8
 800437c:	eb49 0409 	adc.w	r4, r9, r9
 8004380:	4698      	mov	r8, r3
 8004382:	46a1      	mov	r9, r4
 8004384:	eb18 080a 	adds.w	r8, r8, sl
 8004388:	eb49 090b 	adc.w	r9, r9, fp
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004398:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800439c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043a0:	4688      	mov	r8, r1
 80043a2:	4691      	mov	r9, r2
 80043a4:	eb1a 0508 	adds.w	r5, sl, r8
 80043a8:	eb4b 0609 	adc.w	r6, fp, r9
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4619      	mov	r1, r3
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	f04f 0400 	mov.w	r4, #0
 80043be:	0094      	lsls	r4, r2, #2
 80043c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043c4:	008b      	lsls	r3, r1, #2
 80043c6:	461a      	mov	r2, r3
 80043c8:	4623      	mov	r3, r4
 80043ca:	4628      	mov	r0, r5
 80043cc:	4631      	mov	r1, r6
 80043ce:	f7fc fc15 	bl	8000bfc <__aeabi_uldivmod>
 80043d2:	4603      	mov	r3, r0
 80043d4:	460c      	mov	r4, r1
 80043d6:	461a      	mov	r2, r3
 80043d8:	4bb8      	ldr	r3, [pc, #736]	; (80046bc <UART_SetConfig+0x6f4>)
 80043da:	fba3 2302 	umull	r2, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	469b      	mov	fp, r3
 80043e8:	f04f 0c00 	mov.w	ip, #0
 80043ec:	46d9      	mov	r9, fp
 80043ee:	46e2      	mov	sl, ip
 80043f0:	eb19 0309 	adds.w	r3, r9, r9
 80043f4:	eb4a 040a 	adc.w	r4, sl, sl
 80043f8:	4699      	mov	r9, r3
 80043fa:	46a2      	mov	sl, r4
 80043fc:	eb19 090b 	adds.w	r9, r9, fp
 8004400:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004404:	f04f 0100 	mov.w	r1, #0
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004418:	4689      	mov	r9, r1
 800441a:	4692      	mov	sl, r2
 800441c:	eb1b 0509 	adds.w	r5, fp, r9
 8004420:	eb4c 060a 	adc.w	r6, ip, sl
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	4619      	mov	r1, r3
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	f04f 0400 	mov.w	r4, #0
 8004436:	0094      	lsls	r4, r2, #2
 8004438:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800443c:	008b      	lsls	r3, r1, #2
 800443e:	461a      	mov	r2, r3
 8004440:	4623      	mov	r3, r4
 8004442:	4628      	mov	r0, r5
 8004444:	4631      	mov	r1, r6
 8004446:	f7fc fbd9 	bl	8000bfc <__aeabi_uldivmod>
 800444a:	4603      	mov	r3, r0
 800444c:	460c      	mov	r4, r1
 800444e:	461a      	mov	r2, r3
 8004450:	4b9a      	ldr	r3, [pc, #616]	; (80046bc <UART_SetConfig+0x6f4>)
 8004452:	fba3 1302 	umull	r1, r3, r3, r2
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2164      	movs	r1, #100	; 0x64
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	3332      	adds	r3, #50	; 0x32
 8004464:	4a95      	ldr	r2, [pc, #596]	; (80046bc <UART_SetConfig+0x6f4>)
 8004466:	fba2 2303 	umull	r2, r3, r2, r3
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004470:	4498      	add	r8, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	469b      	mov	fp, r3
 8004476:	f04f 0c00 	mov.w	ip, #0
 800447a:	46d9      	mov	r9, fp
 800447c:	46e2      	mov	sl, ip
 800447e:	eb19 0309 	adds.w	r3, r9, r9
 8004482:	eb4a 040a 	adc.w	r4, sl, sl
 8004486:	4699      	mov	r9, r3
 8004488:	46a2      	mov	sl, r4
 800448a:	eb19 090b 	adds.w	r9, r9, fp
 800448e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044a6:	4689      	mov	r9, r1
 80044a8:	4692      	mov	sl, r2
 80044aa:	eb1b 0509 	adds.w	r5, fp, r9
 80044ae:	eb4c 060a 	adc.w	r6, ip, sl
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4619      	mov	r1, r3
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	f04f 0400 	mov.w	r4, #0
 80044c4:	0094      	lsls	r4, r2, #2
 80044c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044ca:	008b      	lsls	r3, r1, #2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4623      	mov	r3, r4
 80044d0:	4628      	mov	r0, r5
 80044d2:	4631      	mov	r1, r6
 80044d4:	f7fc fb92 	bl	8000bfc <__aeabi_uldivmod>
 80044d8:	4603      	mov	r3, r0
 80044da:	460c      	mov	r4, r1
 80044dc:	461a      	mov	r2, r3
 80044de:	4b77      	ldr	r3, [pc, #476]	; (80046bc <UART_SetConfig+0x6f4>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	; 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	3332      	adds	r3, #50	; 0x32
 80044f2:	4a72      	ldr	r2, [pc, #456]	; (80046bc <UART_SetConfig+0x6f4>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 020f 	and.w	r2, r3, #15
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4442      	add	r2, r8
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	e0d0      	b.n	80046aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004508:	f7fe f9a8 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 800450c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	469a      	mov	sl, r3
 8004512:	f04f 0b00 	mov.w	fp, #0
 8004516:	46d0      	mov	r8, sl
 8004518:	46d9      	mov	r9, fp
 800451a:	eb18 0308 	adds.w	r3, r8, r8
 800451e:	eb49 0409 	adc.w	r4, r9, r9
 8004522:	4698      	mov	r8, r3
 8004524:	46a1      	mov	r9, r4
 8004526:	eb18 080a 	adds.w	r8, r8, sl
 800452a:	eb49 090b 	adc.w	r9, r9, fp
 800452e:	f04f 0100 	mov.w	r1, #0
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800453a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800453e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004542:	4688      	mov	r8, r1
 8004544:	4691      	mov	r9, r2
 8004546:	eb1a 0508 	adds.w	r5, sl, r8
 800454a:	eb4b 0609 	adc.w	r6, fp, r9
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4619      	mov	r1, r3
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	f04f 0300 	mov.w	r3, #0
 800455c:	f04f 0400 	mov.w	r4, #0
 8004560:	0094      	lsls	r4, r2, #2
 8004562:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004566:	008b      	lsls	r3, r1, #2
 8004568:	461a      	mov	r2, r3
 800456a:	4623      	mov	r3, r4
 800456c:	4628      	mov	r0, r5
 800456e:	4631      	mov	r1, r6
 8004570:	f7fc fb44 	bl	8000bfc <__aeabi_uldivmod>
 8004574:	4603      	mov	r3, r0
 8004576:	460c      	mov	r4, r1
 8004578:	461a      	mov	r2, r3
 800457a:	4b50      	ldr	r3, [pc, #320]	; (80046bc <UART_SetConfig+0x6f4>)
 800457c:	fba3 2302 	umull	r2, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	469b      	mov	fp, r3
 800458a:	f04f 0c00 	mov.w	ip, #0
 800458e:	46d9      	mov	r9, fp
 8004590:	46e2      	mov	sl, ip
 8004592:	eb19 0309 	adds.w	r3, r9, r9
 8004596:	eb4a 040a 	adc.w	r4, sl, sl
 800459a:	4699      	mov	r9, r3
 800459c:	46a2      	mov	sl, r4
 800459e:	eb19 090b 	adds.w	r9, r9, fp
 80045a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045a6:	f04f 0100 	mov.w	r1, #0
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ba:	4689      	mov	r9, r1
 80045bc:	4692      	mov	sl, r2
 80045be:	eb1b 0509 	adds.w	r5, fp, r9
 80045c2:	eb4c 060a 	adc.w	r6, ip, sl
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4619      	mov	r1, r3
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	0094      	lsls	r4, r2, #2
 80045da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045de:	008b      	lsls	r3, r1, #2
 80045e0:	461a      	mov	r2, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	4628      	mov	r0, r5
 80045e6:	4631      	mov	r1, r6
 80045e8:	f7fc fb08 	bl	8000bfc <__aeabi_uldivmod>
 80045ec:	4603      	mov	r3, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b32      	ldr	r3, [pc, #200]	; (80046bc <UART_SetConfig+0x6f4>)
 80045f4:	fba3 1302 	umull	r1, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	2164      	movs	r1, #100	; 0x64
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	3332      	adds	r3, #50	; 0x32
 8004606:	4a2d      	ldr	r2, [pc, #180]	; (80046bc <UART_SetConfig+0x6f4>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	095b      	lsrs	r3, r3, #5
 800460e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004612:	4498      	add	r8, r3
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	469b      	mov	fp, r3
 8004618:	f04f 0c00 	mov.w	ip, #0
 800461c:	46d9      	mov	r9, fp
 800461e:	46e2      	mov	sl, ip
 8004620:	eb19 0309 	adds.w	r3, r9, r9
 8004624:	eb4a 040a 	adc.w	r4, sl, sl
 8004628:	4699      	mov	r9, r3
 800462a:	46a2      	mov	sl, r4
 800462c:	eb19 090b 	adds.w	r9, r9, fp
 8004630:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004634:	f04f 0100 	mov.w	r1, #0
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004640:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004644:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004648:	4689      	mov	r9, r1
 800464a:	4692      	mov	sl, r2
 800464c:	eb1b 0509 	adds.w	r5, fp, r9
 8004650:	eb4c 060a 	adc.w	r6, ip, sl
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4619      	mov	r1, r3
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	f04f 0400 	mov.w	r4, #0
 8004666:	0094      	lsls	r4, r2, #2
 8004668:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800466c:	008b      	lsls	r3, r1, #2
 800466e:	461a      	mov	r2, r3
 8004670:	4623      	mov	r3, r4
 8004672:	4628      	mov	r0, r5
 8004674:	4631      	mov	r1, r6
 8004676:	f7fc fac1 	bl	8000bfc <__aeabi_uldivmod>
 800467a:	4603      	mov	r3, r0
 800467c:	460c      	mov	r4, r1
 800467e:	461a      	mov	r2, r3
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <UART_SetConfig+0x6f4>)
 8004682:	fba3 1302 	umull	r1, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2164      	movs	r1, #100	; 0x64
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a09      	ldr	r2, [pc, #36]	; (80046bc <UART_SetConfig+0x6f4>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4442      	add	r2, r8
 80046a6:	609a      	str	r2, [r3, #8]
}
 80046a8:	e7ff      	b.n	80046aa <UART_SetConfig+0x6e2>
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	51eb851f 	.word	0x51eb851f

080046c0 <__errno>:
 80046c0:	4b01      	ldr	r3, [pc, #4]	; (80046c8 <__errno+0x8>)
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	2000000c 	.word	0x2000000c

080046cc <__libc_init_array>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4e0d      	ldr	r6, [pc, #52]	; (8004704 <__libc_init_array+0x38>)
 80046d0:	4c0d      	ldr	r4, [pc, #52]	; (8004708 <__libc_init_array+0x3c>)
 80046d2:	1ba4      	subs	r4, r4, r6
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	2500      	movs	r5, #0
 80046d8:	42a5      	cmp	r5, r4
 80046da:	d109      	bne.n	80046f0 <__libc_init_array+0x24>
 80046dc:	4e0b      	ldr	r6, [pc, #44]	; (800470c <__libc_init_array+0x40>)
 80046de:	4c0c      	ldr	r4, [pc, #48]	; (8004710 <__libc_init_array+0x44>)
 80046e0:	f001 fc38 	bl	8005f54 <_init>
 80046e4:	1ba4      	subs	r4, r4, r6
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	2500      	movs	r5, #0
 80046ea:	42a5      	cmp	r5, r4
 80046ec:	d105      	bne.n	80046fa <__libc_init_array+0x2e>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046f4:	4798      	blx	r3
 80046f6:	3501      	adds	r5, #1
 80046f8:	e7ee      	b.n	80046d8 <__libc_init_array+0xc>
 80046fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046fe:	4798      	blx	r3
 8004700:	3501      	adds	r5, #1
 8004702:	e7f2      	b.n	80046ea <__libc_init_array+0x1e>
 8004704:	080061c0 	.word	0x080061c0
 8004708:	080061c0 	.word	0x080061c0
 800470c:	080061c0 	.word	0x080061c0
 8004710:	080061c4 	.word	0x080061c4

08004714 <memset>:
 8004714:	4402      	add	r2, r0
 8004716:	4603      	mov	r3, r0
 8004718:	4293      	cmp	r3, r2
 800471a:	d100      	bne.n	800471e <memset+0xa>
 800471c:	4770      	bx	lr
 800471e:	f803 1b01 	strb.w	r1, [r3], #1
 8004722:	e7f9      	b.n	8004718 <memset+0x4>

08004724 <siprintf>:
 8004724:	b40e      	push	{r1, r2, r3}
 8004726:	b500      	push	{lr}
 8004728:	b09c      	sub	sp, #112	; 0x70
 800472a:	ab1d      	add	r3, sp, #116	; 0x74
 800472c:	9002      	str	r0, [sp, #8]
 800472e:	9006      	str	r0, [sp, #24]
 8004730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004734:	4809      	ldr	r0, [pc, #36]	; (800475c <siprintf+0x38>)
 8004736:	9107      	str	r1, [sp, #28]
 8004738:	9104      	str	r1, [sp, #16]
 800473a:	4909      	ldr	r1, [pc, #36]	; (8004760 <siprintf+0x3c>)
 800473c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004740:	9105      	str	r1, [sp, #20]
 8004742:	6800      	ldr	r0, [r0, #0]
 8004744:	9301      	str	r3, [sp, #4]
 8004746:	a902      	add	r1, sp, #8
 8004748:	f000 f866 	bl	8004818 <_svfiprintf_r>
 800474c:	9b02      	ldr	r3, [sp, #8]
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	b01c      	add	sp, #112	; 0x70
 8004754:	f85d eb04 	ldr.w	lr, [sp], #4
 8004758:	b003      	add	sp, #12
 800475a:	4770      	bx	lr
 800475c:	2000000c 	.word	0x2000000c
 8004760:	ffff0208 	.word	0xffff0208

08004764 <__ssputs_r>:
 8004764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004768:	688e      	ldr	r6, [r1, #8]
 800476a:	429e      	cmp	r6, r3
 800476c:	4682      	mov	sl, r0
 800476e:	460c      	mov	r4, r1
 8004770:	4690      	mov	r8, r2
 8004772:	4699      	mov	r9, r3
 8004774:	d837      	bhi.n	80047e6 <__ssputs_r+0x82>
 8004776:	898a      	ldrh	r2, [r1, #12]
 8004778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800477c:	d031      	beq.n	80047e2 <__ssputs_r+0x7e>
 800477e:	6825      	ldr	r5, [r4, #0]
 8004780:	6909      	ldr	r1, [r1, #16]
 8004782:	1a6f      	subs	r7, r5, r1
 8004784:	6965      	ldr	r5, [r4, #20]
 8004786:	2302      	movs	r3, #2
 8004788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800478c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004790:	f109 0301 	add.w	r3, r9, #1
 8004794:	443b      	add	r3, r7
 8004796:	429d      	cmp	r5, r3
 8004798:	bf38      	it	cc
 800479a:	461d      	movcc	r5, r3
 800479c:	0553      	lsls	r3, r2, #21
 800479e:	d530      	bpl.n	8004802 <__ssputs_r+0x9e>
 80047a0:	4629      	mov	r1, r5
 80047a2:	f000 fb2b 	bl	8004dfc <_malloc_r>
 80047a6:	4606      	mov	r6, r0
 80047a8:	b950      	cbnz	r0, 80047c0 <__ssputs_r+0x5c>
 80047aa:	230c      	movs	r3, #12
 80047ac:	f8ca 3000 	str.w	r3, [sl]
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c0:	463a      	mov	r2, r7
 80047c2:	6921      	ldr	r1, [r4, #16]
 80047c4:	f000 faa8 	bl	8004d18 <memcpy>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	6126      	str	r6, [r4, #16]
 80047d6:	6165      	str	r5, [r4, #20]
 80047d8:	443e      	add	r6, r7
 80047da:	1bed      	subs	r5, r5, r7
 80047dc:	6026      	str	r6, [r4, #0]
 80047de:	60a5      	str	r5, [r4, #8]
 80047e0:	464e      	mov	r6, r9
 80047e2:	454e      	cmp	r6, r9
 80047e4:	d900      	bls.n	80047e8 <__ssputs_r+0x84>
 80047e6:	464e      	mov	r6, r9
 80047e8:	4632      	mov	r2, r6
 80047ea:	4641      	mov	r1, r8
 80047ec:	6820      	ldr	r0, [r4, #0]
 80047ee:	f000 fa9e 	bl	8004d2e <memmove>
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	1b9b      	subs	r3, r3, r6
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	441e      	add	r6, r3
 80047fc:	6026      	str	r6, [r4, #0]
 80047fe:	2000      	movs	r0, #0
 8004800:	e7dc      	b.n	80047bc <__ssputs_r+0x58>
 8004802:	462a      	mov	r2, r5
 8004804:	f000 fb54 	bl	8004eb0 <_realloc_r>
 8004808:	4606      	mov	r6, r0
 800480a:	2800      	cmp	r0, #0
 800480c:	d1e2      	bne.n	80047d4 <__ssputs_r+0x70>
 800480e:	6921      	ldr	r1, [r4, #16]
 8004810:	4650      	mov	r0, sl
 8004812:	f000 faa5 	bl	8004d60 <_free_r>
 8004816:	e7c8      	b.n	80047aa <__ssputs_r+0x46>

08004818 <_svfiprintf_r>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	461d      	mov	r5, r3
 800481e:	898b      	ldrh	r3, [r1, #12]
 8004820:	061f      	lsls	r7, r3, #24
 8004822:	b09d      	sub	sp, #116	; 0x74
 8004824:	4680      	mov	r8, r0
 8004826:	460c      	mov	r4, r1
 8004828:	4616      	mov	r6, r2
 800482a:	d50f      	bpl.n	800484c <_svfiprintf_r+0x34>
 800482c:	690b      	ldr	r3, [r1, #16]
 800482e:	b96b      	cbnz	r3, 800484c <_svfiprintf_r+0x34>
 8004830:	2140      	movs	r1, #64	; 0x40
 8004832:	f000 fae3 	bl	8004dfc <_malloc_r>
 8004836:	6020      	str	r0, [r4, #0]
 8004838:	6120      	str	r0, [r4, #16]
 800483a:	b928      	cbnz	r0, 8004848 <_svfiprintf_r+0x30>
 800483c:	230c      	movs	r3, #12
 800483e:	f8c8 3000 	str.w	r3, [r8]
 8004842:	f04f 30ff 	mov.w	r0, #4294967295
 8004846:	e0c8      	b.n	80049da <_svfiprintf_r+0x1c2>
 8004848:	2340      	movs	r3, #64	; 0x40
 800484a:	6163      	str	r3, [r4, #20]
 800484c:	2300      	movs	r3, #0
 800484e:	9309      	str	r3, [sp, #36]	; 0x24
 8004850:	2320      	movs	r3, #32
 8004852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004856:	2330      	movs	r3, #48	; 0x30
 8004858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800485c:	9503      	str	r5, [sp, #12]
 800485e:	f04f 0b01 	mov.w	fp, #1
 8004862:	4637      	mov	r7, r6
 8004864:	463d      	mov	r5, r7
 8004866:	f815 3b01 	ldrb.w	r3, [r5], #1
 800486a:	b10b      	cbz	r3, 8004870 <_svfiprintf_r+0x58>
 800486c:	2b25      	cmp	r3, #37	; 0x25
 800486e:	d13e      	bne.n	80048ee <_svfiprintf_r+0xd6>
 8004870:	ebb7 0a06 	subs.w	sl, r7, r6
 8004874:	d00b      	beq.n	800488e <_svfiprintf_r+0x76>
 8004876:	4653      	mov	r3, sl
 8004878:	4632      	mov	r2, r6
 800487a:	4621      	mov	r1, r4
 800487c:	4640      	mov	r0, r8
 800487e:	f7ff ff71 	bl	8004764 <__ssputs_r>
 8004882:	3001      	adds	r0, #1
 8004884:	f000 80a4 	beq.w	80049d0 <_svfiprintf_r+0x1b8>
 8004888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800488a:	4453      	add	r3, sl
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
 800488e:	783b      	ldrb	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 809d 	beq.w	80049d0 <_svfiprintf_r+0x1b8>
 8004896:	2300      	movs	r3, #0
 8004898:	f04f 32ff 	mov.w	r2, #4294967295
 800489c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048a0:	9304      	str	r3, [sp, #16]
 80048a2:	9307      	str	r3, [sp, #28]
 80048a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048a8:	931a      	str	r3, [sp, #104]	; 0x68
 80048aa:	462f      	mov	r7, r5
 80048ac:	2205      	movs	r2, #5
 80048ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80048b2:	4850      	ldr	r0, [pc, #320]	; (80049f4 <_svfiprintf_r+0x1dc>)
 80048b4:	f7fb fcb4 	bl	8000220 <memchr>
 80048b8:	9b04      	ldr	r3, [sp, #16]
 80048ba:	b9d0      	cbnz	r0, 80048f2 <_svfiprintf_r+0xda>
 80048bc:	06d9      	lsls	r1, r3, #27
 80048be:	bf44      	itt	mi
 80048c0:	2220      	movmi	r2, #32
 80048c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048c6:	071a      	lsls	r2, r3, #28
 80048c8:	bf44      	itt	mi
 80048ca:	222b      	movmi	r2, #43	; 0x2b
 80048cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80048d0:	782a      	ldrb	r2, [r5, #0]
 80048d2:	2a2a      	cmp	r2, #42	; 0x2a
 80048d4:	d015      	beq.n	8004902 <_svfiprintf_r+0xea>
 80048d6:	9a07      	ldr	r2, [sp, #28]
 80048d8:	462f      	mov	r7, r5
 80048da:	2000      	movs	r0, #0
 80048dc:	250a      	movs	r5, #10
 80048de:	4639      	mov	r1, r7
 80048e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048e4:	3b30      	subs	r3, #48	; 0x30
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	d94d      	bls.n	8004986 <_svfiprintf_r+0x16e>
 80048ea:	b1b8      	cbz	r0, 800491c <_svfiprintf_r+0x104>
 80048ec:	e00f      	b.n	800490e <_svfiprintf_r+0xf6>
 80048ee:	462f      	mov	r7, r5
 80048f0:	e7b8      	b.n	8004864 <_svfiprintf_r+0x4c>
 80048f2:	4a40      	ldr	r2, [pc, #256]	; (80049f4 <_svfiprintf_r+0x1dc>)
 80048f4:	1a80      	subs	r0, r0, r2
 80048f6:	fa0b f000 	lsl.w	r0, fp, r0
 80048fa:	4318      	orrs	r0, r3
 80048fc:	9004      	str	r0, [sp, #16]
 80048fe:	463d      	mov	r5, r7
 8004900:	e7d3      	b.n	80048aa <_svfiprintf_r+0x92>
 8004902:	9a03      	ldr	r2, [sp, #12]
 8004904:	1d11      	adds	r1, r2, #4
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	9103      	str	r1, [sp, #12]
 800490a:	2a00      	cmp	r2, #0
 800490c:	db01      	blt.n	8004912 <_svfiprintf_r+0xfa>
 800490e:	9207      	str	r2, [sp, #28]
 8004910:	e004      	b.n	800491c <_svfiprintf_r+0x104>
 8004912:	4252      	negs	r2, r2
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	9207      	str	r2, [sp, #28]
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	783b      	ldrb	r3, [r7, #0]
 800491e:	2b2e      	cmp	r3, #46	; 0x2e
 8004920:	d10c      	bne.n	800493c <_svfiprintf_r+0x124>
 8004922:	787b      	ldrb	r3, [r7, #1]
 8004924:	2b2a      	cmp	r3, #42	; 0x2a
 8004926:	d133      	bne.n	8004990 <_svfiprintf_r+0x178>
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	1d1a      	adds	r2, r3, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	9203      	str	r2, [sp, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	bfb8      	it	lt
 8004934:	f04f 33ff 	movlt.w	r3, #4294967295
 8004938:	3702      	adds	r7, #2
 800493a:	9305      	str	r3, [sp, #20]
 800493c:	4d2e      	ldr	r5, [pc, #184]	; (80049f8 <_svfiprintf_r+0x1e0>)
 800493e:	7839      	ldrb	r1, [r7, #0]
 8004940:	2203      	movs	r2, #3
 8004942:	4628      	mov	r0, r5
 8004944:	f7fb fc6c 	bl	8000220 <memchr>
 8004948:	b138      	cbz	r0, 800495a <_svfiprintf_r+0x142>
 800494a:	2340      	movs	r3, #64	; 0x40
 800494c:	1b40      	subs	r0, r0, r5
 800494e:	fa03 f000 	lsl.w	r0, r3, r0
 8004952:	9b04      	ldr	r3, [sp, #16]
 8004954:	4303      	orrs	r3, r0
 8004956:	3701      	adds	r7, #1
 8004958:	9304      	str	r3, [sp, #16]
 800495a:	7839      	ldrb	r1, [r7, #0]
 800495c:	4827      	ldr	r0, [pc, #156]	; (80049fc <_svfiprintf_r+0x1e4>)
 800495e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004962:	2206      	movs	r2, #6
 8004964:	1c7e      	adds	r6, r7, #1
 8004966:	f7fb fc5b 	bl	8000220 <memchr>
 800496a:	2800      	cmp	r0, #0
 800496c:	d038      	beq.n	80049e0 <_svfiprintf_r+0x1c8>
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <_svfiprintf_r+0x1e8>)
 8004970:	bb13      	cbnz	r3, 80049b8 <_svfiprintf_r+0x1a0>
 8004972:	9b03      	ldr	r3, [sp, #12]
 8004974:	3307      	adds	r3, #7
 8004976:	f023 0307 	bic.w	r3, r3, #7
 800497a:	3308      	adds	r3, #8
 800497c:	9303      	str	r3, [sp, #12]
 800497e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004980:	444b      	add	r3, r9
 8004982:	9309      	str	r3, [sp, #36]	; 0x24
 8004984:	e76d      	b.n	8004862 <_svfiprintf_r+0x4a>
 8004986:	fb05 3202 	mla	r2, r5, r2, r3
 800498a:	2001      	movs	r0, #1
 800498c:	460f      	mov	r7, r1
 800498e:	e7a6      	b.n	80048de <_svfiprintf_r+0xc6>
 8004990:	2300      	movs	r3, #0
 8004992:	3701      	adds	r7, #1
 8004994:	9305      	str	r3, [sp, #20]
 8004996:	4619      	mov	r1, r3
 8004998:	250a      	movs	r5, #10
 800499a:	4638      	mov	r0, r7
 800499c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049a0:	3a30      	subs	r2, #48	; 0x30
 80049a2:	2a09      	cmp	r2, #9
 80049a4:	d903      	bls.n	80049ae <_svfiprintf_r+0x196>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0c8      	beq.n	800493c <_svfiprintf_r+0x124>
 80049aa:	9105      	str	r1, [sp, #20]
 80049ac:	e7c6      	b.n	800493c <_svfiprintf_r+0x124>
 80049ae:	fb05 2101 	mla	r1, r5, r1, r2
 80049b2:	2301      	movs	r3, #1
 80049b4:	4607      	mov	r7, r0
 80049b6:	e7f0      	b.n	800499a <_svfiprintf_r+0x182>
 80049b8:	ab03      	add	r3, sp, #12
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	4622      	mov	r2, r4
 80049be:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <_svfiprintf_r+0x1ec>)
 80049c0:	a904      	add	r1, sp, #16
 80049c2:	4640      	mov	r0, r8
 80049c4:	f3af 8000 	nop.w
 80049c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80049cc:	4681      	mov	r9, r0
 80049ce:	d1d6      	bne.n	800497e <_svfiprintf_r+0x166>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	065b      	lsls	r3, r3, #25
 80049d4:	f53f af35 	bmi.w	8004842 <_svfiprintf_r+0x2a>
 80049d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049da:	b01d      	add	sp, #116	; 0x74
 80049dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e0:	ab03      	add	r3, sp, #12
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	4622      	mov	r2, r4
 80049e6:	4b07      	ldr	r3, [pc, #28]	; (8004a04 <_svfiprintf_r+0x1ec>)
 80049e8:	a904      	add	r1, sp, #16
 80049ea:	4640      	mov	r0, r8
 80049ec:	f000 f882 	bl	8004af4 <_printf_i>
 80049f0:	e7ea      	b.n	80049c8 <_svfiprintf_r+0x1b0>
 80049f2:	bf00      	nop
 80049f4:	08005fa8 	.word	0x08005fa8
 80049f8:	08005fae 	.word	0x08005fae
 80049fc:	08005fb2 	.word	0x08005fb2
 8004a00:	00000000 	.word	0x00000000
 8004a04:	08004765 	.word	0x08004765

08004a08 <_printf_common>:
 8004a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0c:	4691      	mov	r9, r2
 8004a0e:	461f      	mov	r7, r3
 8004a10:	688a      	ldr	r2, [r1, #8]
 8004a12:	690b      	ldr	r3, [r1, #16]
 8004a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bfb8      	it	lt
 8004a1c:	4613      	movlt	r3, r2
 8004a1e:	f8c9 3000 	str.w	r3, [r9]
 8004a22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a26:	4606      	mov	r6, r0
 8004a28:	460c      	mov	r4, r1
 8004a2a:	b112      	cbz	r2, 8004a32 <_printf_common+0x2a>
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c9 3000 	str.w	r3, [r9]
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	0699      	lsls	r1, r3, #26
 8004a36:	bf42      	ittt	mi
 8004a38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a3c:	3302      	addmi	r3, #2
 8004a3e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a42:	6825      	ldr	r5, [r4, #0]
 8004a44:	f015 0506 	ands.w	r5, r5, #6
 8004a48:	d107      	bne.n	8004a5a <_printf_common+0x52>
 8004a4a:	f104 0a19 	add.w	sl, r4, #25
 8004a4e:	68e3      	ldr	r3, [r4, #12]
 8004a50:	f8d9 2000 	ldr.w	r2, [r9]
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	42ab      	cmp	r3, r5
 8004a58:	dc28      	bgt.n	8004aac <_printf_common+0xa4>
 8004a5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a5e:	6822      	ldr	r2, [r4, #0]
 8004a60:	3300      	adds	r3, #0
 8004a62:	bf18      	it	ne
 8004a64:	2301      	movne	r3, #1
 8004a66:	0692      	lsls	r2, r2, #26
 8004a68:	d42d      	bmi.n	8004ac6 <_printf_common+0xbe>
 8004a6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a6e:	4639      	mov	r1, r7
 8004a70:	4630      	mov	r0, r6
 8004a72:	47c0      	blx	r8
 8004a74:	3001      	adds	r0, #1
 8004a76:	d020      	beq.n	8004aba <_printf_common+0xb2>
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	68e5      	ldr	r5, [r4, #12]
 8004a7c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a80:	f003 0306 	and.w	r3, r3, #6
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	bf08      	it	eq
 8004a88:	1aad      	subeq	r5, r5, r2
 8004a8a:	68a3      	ldr	r3, [r4, #8]
 8004a8c:	6922      	ldr	r2, [r4, #16]
 8004a8e:	bf0c      	ite	eq
 8004a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a94:	2500      	movne	r5, #0
 8004a96:	4293      	cmp	r3, r2
 8004a98:	bfc4      	itt	gt
 8004a9a:	1a9b      	subgt	r3, r3, r2
 8004a9c:	18ed      	addgt	r5, r5, r3
 8004a9e:	f04f 0900 	mov.w	r9, #0
 8004aa2:	341a      	adds	r4, #26
 8004aa4:	454d      	cmp	r5, r9
 8004aa6:	d11a      	bne.n	8004ade <_printf_common+0xd6>
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	e008      	b.n	8004abe <_printf_common+0xb6>
 8004aac:	2301      	movs	r3, #1
 8004aae:	4652      	mov	r2, sl
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d103      	bne.n	8004ac2 <_printf_common+0xba>
 8004aba:	f04f 30ff 	mov.w	r0, #4294967295
 8004abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	e7c3      	b.n	8004a4e <_printf_common+0x46>
 8004ac6:	18e1      	adds	r1, r4, r3
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	2030      	movs	r0, #48	; 0x30
 8004acc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ad0:	4422      	add	r2, r4
 8004ad2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ad6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ada:	3302      	adds	r3, #2
 8004adc:	e7c5      	b.n	8004a6a <_printf_common+0x62>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	47c0      	blx	r8
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d0e6      	beq.n	8004aba <_printf_common+0xb2>
 8004aec:	f109 0901 	add.w	r9, r9, #1
 8004af0:	e7d8      	b.n	8004aa4 <_printf_common+0x9c>
	...

08004af4 <_printf_i>:
 8004af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004af8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004afc:	460c      	mov	r4, r1
 8004afe:	7e09      	ldrb	r1, [r1, #24]
 8004b00:	b085      	sub	sp, #20
 8004b02:	296e      	cmp	r1, #110	; 0x6e
 8004b04:	4617      	mov	r7, r2
 8004b06:	4606      	mov	r6, r0
 8004b08:	4698      	mov	r8, r3
 8004b0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b0c:	f000 80b3 	beq.w	8004c76 <_printf_i+0x182>
 8004b10:	d822      	bhi.n	8004b58 <_printf_i+0x64>
 8004b12:	2963      	cmp	r1, #99	; 0x63
 8004b14:	d036      	beq.n	8004b84 <_printf_i+0x90>
 8004b16:	d80a      	bhi.n	8004b2e <_printf_i+0x3a>
 8004b18:	2900      	cmp	r1, #0
 8004b1a:	f000 80b9 	beq.w	8004c90 <_printf_i+0x19c>
 8004b1e:	2958      	cmp	r1, #88	; 0x58
 8004b20:	f000 8083 	beq.w	8004c2a <_printf_i+0x136>
 8004b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b2c:	e032      	b.n	8004b94 <_printf_i+0xa0>
 8004b2e:	2964      	cmp	r1, #100	; 0x64
 8004b30:	d001      	beq.n	8004b36 <_printf_i+0x42>
 8004b32:	2969      	cmp	r1, #105	; 0x69
 8004b34:	d1f6      	bne.n	8004b24 <_printf_i+0x30>
 8004b36:	6820      	ldr	r0, [r4, #0]
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	0605      	lsls	r5, r0, #24
 8004b3c:	f103 0104 	add.w	r1, r3, #4
 8004b40:	d52a      	bpl.n	8004b98 <_printf_i+0xa4>
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6011      	str	r1, [r2, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da03      	bge.n	8004b52 <_printf_i+0x5e>
 8004b4a:	222d      	movs	r2, #45	; 0x2d
 8004b4c:	425b      	negs	r3, r3
 8004b4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b52:	486f      	ldr	r0, [pc, #444]	; (8004d10 <_printf_i+0x21c>)
 8004b54:	220a      	movs	r2, #10
 8004b56:	e039      	b.n	8004bcc <_printf_i+0xd8>
 8004b58:	2973      	cmp	r1, #115	; 0x73
 8004b5a:	f000 809d 	beq.w	8004c98 <_printf_i+0x1a4>
 8004b5e:	d808      	bhi.n	8004b72 <_printf_i+0x7e>
 8004b60:	296f      	cmp	r1, #111	; 0x6f
 8004b62:	d020      	beq.n	8004ba6 <_printf_i+0xb2>
 8004b64:	2970      	cmp	r1, #112	; 0x70
 8004b66:	d1dd      	bne.n	8004b24 <_printf_i+0x30>
 8004b68:	6823      	ldr	r3, [r4, #0]
 8004b6a:	f043 0320 	orr.w	r3, r3, #32
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	e003      	b.n	8004b7a <_printf_i+0x86>
 8004b72:	2975      	cmp	r1, #117	; 0x75
 8004b74:	d017      	beq.n	8004ba6 <_printf_i+0xb2>
 8004b76:	2978      	cmp	r1, #120	; 0x78
 8004b78:	d1d4      	bne.n	8004b24 <_printf_i+0x30>
 8004b7a:	2378      	movs	r3, #120	; 0x78
 8004b7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b80:	4864      	ldr	r0, [pc, #400]	; (8004d14 <_printf_i+0x220>)
 8004b82:	e055      	b.n	8004c30 <_printf_i+0x13c>
 8004b84:	6813      	ldr	r3, [r2, #0]
 8004b86:	1d19      	adds	r1, r3, #4
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6011      	str	r1, [r2, #0]
 8004b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b94:	2301      	movs	r3, #1
 8004b96:	e08c      	b.n	8004cb2 <_printf_i+0x1be>
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6011      	str	r1, [r2, #0]
 8004b9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ba0:	bf18      	it	ne
 8004ba2:	b21b      	sxthne	r3, r3
 8004ba4:	e7cf      	b.n	8004b46 <_printf_i+0x52>
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	6825      	ldr	r5, [r4, #0]
 8004baa:	1d18      	adds	r0, r3, #4
 8004bac:	6010      	str	r0, [r2, #0]
 8004bae:	0628      	lsls	r0, r5, #24
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_i+0xc2>
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	e002      	b.n	8004bbc <_printf_i+0xc8>
 8004bb6:	0668      	lsls	r0, r5, #25
 8004bb8:	d5fb      	bpl.n	8004bb2 <_printf_i+0xbe>
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	4854      	ldr	r0, [pc, #336]	; (8004d10 <_printf_i+0x21c>)
 8004bbe:	296f      	cmp	r1, #111	; 0x6f
 8004bc0:	bf14      	ite	ne
 8004bc2:	220a      	movne	r2, #10
 8004bc4:	2208      	moveq	r2, #8
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bcc:	6865      	ldr	r5, [r4, #4]
 8004bce:	60a5      	str	r5, [r4, #8]
 8004bd0:	2d00      	cmp	r5, #0
 8004bd2:	f2c0 8095 	blt.w	8004d00 <_printf_i+0x20c>
 8004bd6:	6821      	ldr	r1, [r4, #0]
 8004bd8:	f021 0104 	bic.w	r1, r1, #4
 8004bdc:	6021      	str	r1, [r4, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d13d      	bne.n	8004c5e <_printf_i+0x16a>
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	f040 808e 	bne.w	8004d04 <_printf_i+0x210>
 8004be8:	4665      	mov	r5, ip
 8004bea:	2a08      	cmp	r2, #8
 8004bec:	d10b      	bne.n	8004c06 <_printf_i+0x112>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	07db      	lsls	r3, r3, #31
 8004bf2:	d508      	bpl.n	8004c06 <_printf_i+0x112>
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	6862      	ldr	r2, [r4, #4]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	bfde      	ittt	le
 8004bfc:	2330      	movle	r3, #48	; 0x30
 8004bfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c06:	ebac 0305 	sub.w	r3, ip, r5
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	f8cd 8000 	str.w	r8, [sp]
 8004c10:	463b      	mov	r3, r7
 8004c12:	aa03      	add	r2, sp, #12
 8004c14:	4621      	mov	r1, r4
 8004c16:	4630      	mov	r0, r6
 8004c18:	f7ff fef6 	bl	8004a08 <_printf_common>
 8004c1c:	3001      	adds	r0, #1
 8004c1e:	d14d      	bne.n	8004cbc <_printf_i+0x1c8>
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	b005      	add	sp, #20
 8004c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c2a:	4839      	ldr	r0, [pc, #228]	; (8004d10 <_printf_i+0x21c>)
 8004c2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c30:	6813      	ldr	r3, [r2, #0]
 8004c32:	6821      	ldr	r1, [r4, #0]
 8004c34:	1d1d      	adds	r5, r3, #4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6015      	str	r5, [r2, #0]
 8004c3a:	060a      	lsls	r2, r1, #24
 8004c3c:	d50b      	bpl.n	8004c56 <_printf_i+0x162>
 8004c3e:	07ca      	lsls	r2, r1, #31
 8004c40:	bf44      	itt	mi
 8004c42:	f041 0120 	orrmi.w	r1, r1, #32
 8004c46:	6021      	strmi	r1, [r4, #0]
 8004c48:	b91b      	cbnz	r3, 8004c52 <_printf_i+0x15e>
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	f022 0220 	bic.w	r2, r2, #32
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	2210      	movs	r2, #16
 8004c54:	e7b7      	b.n	8004bc6 <_printf_i+0xd2>
 8004c56:	064d      	lsls	r5, r1, #25
 8004c58:	bf48      	it	mi
 8004c5a:	b29b      	uxthmi	r3, r3
 8004c5c:	e7ef      	b.n	8004c3e <_printf_i+0x14a>
 8004c5e:	4665      	mov	r5, ip
 8004c60:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c64:	fb02 3311 	mls	r3, r2, r1, r3
 8004c68:	5cc3      	ldrb	r3, [r0, r3]
 8004c6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c6e:	460b      	mov	r3, r1
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d1f5      	bne.n	8004c60 <_printf_i+0x16c>
 8004c74:	e7b9      	b.n	8004bea <_printf_i+0xf6>
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	6825      	ldr	r5, [r4, #0]
 8004c7a:	6961      	ldr	r1, [r4, #20]
 8004c7c:	1d18      	adds	r0, r3, #4
 8004c7e:	6010      	str	r0, [r2, #0]
 8004c80:	0628      	lsls	r0, r5, #24
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	d501      	bpl.n	8004c8a <_printf_i+0x196>
 8004c86:	6019      	str	r1, [r3, #0]
 8004c88:	e002      	b.n	8004c90 <_printf_i+0x19c>
 8004c8a:	066a      	lsls	r2, r5, #25
 8004c8c:	d5fb      	bpl.n	8004c86 <_printf_i+0x192>
 8004c8e:	8019      	strh	r1, [r3, #0]
 8004c90:	2300      	movs	r3, #0
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	4665      	mov	r5, ip
 8004c96:	e7b9      	b.n	8004c0c <_printf_i+0x118>
 8004c98:	6813      	ldr	r3, [r2, #0]
 8004c9a:	1d19      	adds	r1, r3, #4
 8004c9c:	6011      	str	r1, [r2, #0]
 8004c9e:	681d      	ldr	r5, [r3, #0]
 8004ca0:	6862      	ldr	r2, [r4, #4]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	f7fb fabb 	bl	8000220 <memchr>
 8004caa:	b108      	cbz	r0, 8004cb0 <_printf_i+0x1bc>
 8004cac:	1b40      	subs	r0, r0, r5
 8004cae:	6060      	str	r0, [r4, #4]
 8004cb0:	6863      	ldr	r3, [r4, #4]
 8004cb2:	6123      	str	r3, [r4, #16]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cba:	e7a7      	b.n	8004c0c <_printf_i+0x118>
 8004cbc:	6923      	ldr	r3, [r4, #16]
 8004cbe:	462a      	mov	r2, r5
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	4630      	mov	r0, r6
 8004cc4:	47c0      	blx	r8
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	d0aa      	beq.n	8004c20 <_printf_i+0x12c>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	079b      	lsls	r3, r3, #30
 8004cce:	d413      	bmi.n	8004cf8 <_printf_i+0x204>
 8004cd0:	68e0      	ldr	r0, [r4, #12]
 8004cd2:	9b03      	ldr	r3, [sp, #12]
 8004cd4:	4298      	cmp	r0, r3
 8004cd6:	bfb8      	it	lt
 8004cd8:	4618      	movlt	r0, r3
 8004cda:	e7a3      	b.n	8004c24 <_printf_i+0x130>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	464a      	mov	r2, r9
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d09a      	beq.n	8004c20 <_printf_i+0x12c>
 8004cea:	3501      	adds	r5, #1
 8004cec:	68e3      	ldr	r3, [r4, #12]
 8004cee:	9a03      	ldr	r2, [sp, #12]
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	42ab      	cmp	r3, r5
 8004cf4:	dcf2      	bgt.n	8004cdc <_printf_i+0x1e8>
 8004cf6:	e7eb      	b.n	8004cd0 <_printf_i+0x1dc>
 8004cf8:	2500      	movs	r5, #0
 8004cfa:	f104 0919 	add.w	r9, r4, #25
 8004cfe:	e7f5      	b.n	8004cec <_printf_i+0x1f8>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1ac      	bne.n	8004c5e <_printf_i+0x16a>
 8004d04:	7803      	ldrb	r3, [r0, #0]
 8004d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d0e:	e76c      	b.n	8004bea <_printf_i+0xf6>
 8004d10:	08005fb9 	.word	0x08005fb9
 8004d14:	08005fca 	.word	0x08005fca

08004d18 <memcpy>:
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	1e43      	subs	r3, r0, #1
 8004d1c:	440a      	add	r2, r1
 8004d1e:	4291      	cmp	r1, r2
 8004d20:	d100      	bne.n	8004d24 <memcpy+0xc>
 8004d22:	bd10      	pop	{r4, pc}
 8004d24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d2c:	e7f7      	b.n	8004d1e <memcpy+0x6>

08004d2e <memmove>:
 8004d2e:	4288      	cmp	r0, r1
 8004d30:	b510      	push	{r4, lr}
 8004d32:	eb01 0302 	add.w	r3, r1, r2
 8004d36:	d807      	bhi.n	8004d48 <memmove+0x1a>
 8004d38:	1e42      	subs	r2, r0, #1
 8004d3a:	4299      	cmp	r1, r3
 8004d3c:	d00a      	beq.n	8004d54 <memmove+0x26>
 8004d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d42:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d46:	e7f8      	b.n	8004d3a <memmove+0xc>
 8004d48:	4283      	cmp	r3, r0
 8004d4a:	d9f5      	bls.n	8004d38 <memmove+0xa>
 8004d4c:	1881      	adds	r1, r0, r2
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	42d3      	cmn	r3, r2
 8004d52:	d100      	bne.n	8004d56 <memmove+0x28>
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d5a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d5e:	e7f7      	b.n	8004d50 <memmove+0x22>

08004d60 <_free_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4605      	mov	r5, r0
 8004d64:	2900      	cmp	r1, #0
 8004d66:	d045      	beq.n	8004df4 <_free_r+0x94>
 8004d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d6c:	1f0c      	subs	r4, r1, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bfb8      	it	lt
 8004d72:	18e4      	addlt	r4, r4, r3
 8004d74:	f000 f8d2 	bl	8004f1c <__malloc_lock>
 8004d78:	4a1f      	ldr	r2, [pc, #124]	; (8004df8 <_free_r+0x98>)
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	b933      	cbnz	r3, 8004d8e <_free_r+0x2e>
 8004d80:	6063      	str	r3, [r4, #4]
 8004d82:	6014      	str	r4, [r2, #0]
 8004d84:	4628      	mov	r0, r5
 8004d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d8a:	f000 b8c8 	b.w	8004f1e <__malloc_unlock>
 8004d8e:	42a3      	cmp	r3, r4
 8004d90:	d90c      	bls.n	8004dac <_free_r+0x4c>
 8004d92:	6821      	ldr	r1, [r4, #0]
 8004d94:	1862      	adds	r2, r4, r1
 8004d96:	4293      	cmp	r3, r2
 8004d98:	bf04      	itt	eq
 8004d9a:	681a      	ldreq	r2, [r3, #0]
 8004d9c:	685b      	ldreq	r3, [r3, #4]
 8004d9e:	6063      	str	r3, [r4, #4]
 8004da0:	bf04      	itt	eq
 8004da2:	1852      	addeq	r2, r2, r1
 8004da4:	6022      	streq	r2, [r4, #0]
 8004da6:	6004      	str	r4, [r0, #0]
 8004da8:	e7ec      	b.n	8004d84 <_free_r+0x24>
 8004daa:	4613      	mov	r3, r2
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	b10a      	cbz	r2, 8004db4 <_free_r+0x54>
 8004db0:	42a2      	cmp	r2, r4
 8004db2:	d9fa      	bls.n	8004daa <_free_r+0x4a>
 8004db4:	6819      	ldr	r1, [r3, #0]
 8004db6:	1858      	adds	r0, r3, r1
 8004db8:	42a0      	cmp	r0, r4
 8004dba:	d10b      	bne.n	8004dd4 <_free_r+0x74>
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	4401      	add	r1, r0
 8004dc0:	1858      	adds	r0, r3, r1
 8004dc2:	4282      	cmp	r2, r0
 8004dc4:	6019      	str	r1, [r3, #0]
 8004dc6:	d1dd      	bne.n	8004d84 <_free_r+0x24>
 8004dc8:	6810      	ldr	r0, [r2, #0]
 8004dca:	6852      	ldr	r2, [r2, #4]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	4401      	add	r1, r0
 8004dd0:	6019      	str	r1, [r3, #0]
 8004dd2:	e7d7      	b.n	8004d84 <_free_r+0x24>
 8004dd4:	d902      	bls.n	8004ddc <_free_r+0x7c>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	e7d3      	b.n	8004d84 <_free_r+0x24>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	1821      	adds	r1, r4, r0
 8004de0:	428a      	cmp	r2, r1
 8004de2:	bf04      	itt	eq
 8004de4:	6811      	ldreq	r1, [r2, #0]
 8004de6:	6852      	ldreq	r2, [r2, #4]
 8004de8:	6062      	str	r2, [r4, #4]
 8004dea:	bf04      	itt	eq
 8004dec:	1809      	addeq	r1, r1, r0
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	605c      	str	r4, [r3, #4]
 8004df2:	e7c7      	b.n	8004d84 <_free_r+0x24>
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
 8004df6:	bf00      	nop
 8004df8:	20000098 	.word	0x20000098

08004dfc <_malloc_r>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	1ccd      	adds	r5, r1, #3
 8004e00:	f025 0503 	bic.w	r5, r5, #3
 8004e04:	3508      	adds	r5, #8
 8004e06:	2d0c      	cmp	r5, #12
 8004e08:	bf38      	it	cc
 8004e0a:	250c      	movcc	r5, #12
 8004e0c:	2d00      	cmp	r5, #0
 8004e0e:	4606      	mov	r6, r0
 8004e10:	db01      	blt.n	8004e16 <_malloc_r+0x1a>
 8004e12:	42a9      	cmp	r1, r5
 8004e14:	d903      	bls.n	8004e1e <_malloc_r+0x22>
 8004e16:	230c      	movs	r3, #12
 8004e18:	6033      	str	r3, [r6, #0]
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	bd70      	pop	{r4, r5, r6, pc}
 8004e1e:	f000 f87d 	bl	8004f1c <__malloc_lock>
 8004e22:	4a21      	ldr	r2, [pc, #132]	; (8004ea8 <_malloc_r+0xac>)
 8004e24:	6814      	ldr	r4, [r2, #0]
 8004e26:	4621      	mov	r1, r4
 8004e28:	b991      	cbnz	r1, 8004e50 <_malloc_r+0x54>
 8004e2a:	4c20      	ldr	r4, [pc, #128]	; (8004eac <_malloc_r+0xb0>)
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	b91b      	cbnz	r3, 8004e38 <_malloc_r+0x3c>
 8004e30:	4630      	mov	r0, r6
 8004e32:	f000 f863 	bl	8004efc <_sbrk_r>
 8004e36:	6020      	str	r0, [r4, #0]
 8004e38:	4629      	mov	r1, r5
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f000 f85e 	bl	8004efc <_sbrk_r>
 8004e40:	1c43      	adds	r3, r0, #1
 8004e42:	d124      	bne.n	8004e8e <_malloc_r+0x92>
 8004e44:	230c      	movs	r3, #12
 8004e46:	6033      	str	r3, [r6, #0]
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f000 f868 	bl	8004f1e <__malloc_unlock>
 8004e4e:	e7e4      	b.n	8004e1a <_malloc_r+0x1e>
 8004e50:	680b      	ldr	r3, [r1, #0]
 8004e52:	1b5b      	subs	r3, r3, r5
 8004e54:	d418      	bmi.n	8004e88 <_malloc_r+0x8c>
 8004e56:	2b0b      	cmp	r3, #11
 8004e58:	d90f      	bls.n	8004e7a <_malloc_r+0x7e>
 8004e5a:	600b      	str	r3, [r1, #0]
 8004e5c:	50cd      	str	r5, [r1, r3]
 8004e5e:	18cc      	adds	r4, r1, r3
 8004e60:	4630      	mov	r0, r6
 8004e62:	f000 f85c 	bl	8004f1e <__malloc_unlock>
 8004e66:	f104 000b 	add.w	r0, r4, #11
 8004e6a:	1d23      	adds	r3, r4, #4
 8004e6c:	f020 0007 	bic.w	r0, r0, #7
 8004e70:	1ac3      	subs	r3, r0, r3
 8004e72:	d0d3      	beq.n	8004e1c <_malloc_r+0x20>
 8004e74:	425a      	negs	r2, r3
 8004e76:	50e2      	str	r2, [r4, r3]
 8004e78:	e7d0      	b.n	8004e1c <_malloc_r+0x20>
 8004e7a:	428c      	cmp	r4, r1
 8004e7c:	684b      	ldr	r3, [r1, #4]
 8004e7e:	bf16      	itet	ne
 8004e80:	6063      	strne	r3, [r4, #4]
 8004e82:	6013      	streq	r3, [r2, #0]
 8004e84:	460c      	movne	r4, r1
 8004e86:	e7eb      	b.n	8004e60 <_malloc_r+0x64>
 8004e88:	460c      	mov	r4, r1
 8004e8a:	6849      	ldr	r1, [r1, #4]
 8004e8c:	e7cc      	b.n	8004e28 <_malloc_r+0x2c>
 8004e8e:	1cc4      	adds	r4, r0, #3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d005      	beq.n	8004ea4 <_malloc_r+0xa8>
 8004e98:	1a21      	subs	r1, r4, r0
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 f82e 	bl	8004efc <_sbrk_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d0cf      	beq.n	8004e44 <_malloc_r+0x48>
 8004ea4:	6025      	str	r5, [r4, #0]
 8004ea6:	e7db      	b.n	8004e60 <_malloc_r+0x64>
 8004ea8:	20000098 	.word	0x20000098
 8004eac:	2000009c 	.word	0x2000009c

08004eb0 <_realloc_r>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	4607      	mov	r7, r0
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	460e      	mov	r6, r1
 8004eb8:	b921      	cbnz	r1, 8004ec4 <_realloc_r+0x14>
 8004eba:	4611      	mov	r1, r2
 8004ebc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ec0:	f7ff bf9c 	b.w	8004dfc <_malloc_r>
 8004ec4:	b922      	cbnz	r2, 8004ed0 <_realloc_r+0x20>
 8004ec6:	f7ff ff4b 	bl	8004d60 <_free_r>
 8004eca:	4625      	mov	r5, r4
 8004ecc:	4628      	mov	r0, r5
 8004ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed0:	f000 f826 	bl	8004f20 <_malloc_usable_size_r>
 8004ed4:	42a0      	cmp	r0, r4
 8004ed6:	d20f      	bcs.n	8004ef8 <_realloc_r+0x48>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4638      	mov	r0, r7
 8004edc:	f7ff ff8e 	bl	8004dfc <_malloc_r>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d0f2      	beq.n	8004ecc <_realloc_r+0x1c>
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4622      	mov	r2, r4
 8004eea:	f7ff ff15 	bl	8004d18 <memcpy>
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f7ff ff35 	bl	8004d60 <_free_r>
 8004ef6:	e7e9      	b.n	8004ecc <_realloc_r+0x1c>
 8004ef8:	4635      	mov	r5, r6
 8004efa:	e7e7      	b.n	8004ecc <_realloc_r+0x1c>

08004efc <_sbrk_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4c06      	ldr	r4, [pc, #24]	; (8004f18 <_sbrk_r+0x1c>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	4605      	mov	r5, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	f7fc fcc2 	bl	8001890 <_sbrk>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_sbrk_r+0x1a>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_sbrk_r+0x1a>
 8004f14:	602b      	str	r3, [r5, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	20001198 	.word	0x20001198

08004f1c <__malloc_lock>:
 8004f1c:	4770      	bx	lr

08004f1e <__malloc_unlock>:
 8004f1e:	4770      	bx	lr

08004f20 <_malloc_usable_size_r>:
 8004f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f24:	1f18      	subs	r0, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfbc      	itt	lt
 8004f2a:	580b      	ldrlt	r3, [r1, r0]
 8004f2c:	18c0      	addlt	r0, r0, r3
 8004f2e:	4770      	bx	lr

08004f30 <sin>:
 8004f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f32:	ec51 0b10 	vmov	r0, r1, d0
 8004f36:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <sin+0x88>)
 8004f38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	dc07      	bgt.n	8004f50 <sin+0x20>
 8004f40:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004fb0 <sin+0x80>
 8004f44:	2000      	movs	r0, #0
 8004f46:	f000 fe37 	bl	8005bb8 <__kernel_sin>
 8004f4a:	ec51 0b10 	vmov	r0, r1, d0
 8004f4e:	e007      	b.n	8004f60 <sin+0x30>
 8004f50:	4a1a      	ldr	r2, [pc, #104]	; (8004fbc <sin+0x8c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	dd09      	ble.n	8004f6a <sin+0x3a>
 8004f56:	ee10 2a10 	vmov	r2, s0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	f7fb f9b4 	bl	80002c8 <__aeabi_dsub>
 8004f60:	ec41 0b10 	vmov	d0, r0, r1
 8004f64:	b005      	add	sp, #20
 8004f66:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f6a:	4668      	mov	r0, sp
 8004f6c:	f000 f828 	bl	8004fc0 <__ieee754_rem_pio2>
 8004f70:	f000 0003 	and.w	r0, r0, #3
 8004f74:	2801      	cmp	r0, #1
 8004f76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f7a:	ed9d 0b00 	vldr	d0, [sp]
 8004f7e:	d004      	beq.n	8004f8a <sin+0x5a>
 8004f80:	2802      	cmp	r0, #2
 8004f82:	d005      	beq.n	8004f90 <sin+0x60>
 8004f84:	b970      	cbnz	r0, 8004fa4 <sin+0x74>
 8004f86:	2001      	movs	r0, #1
 8004f88:	e7dd      	b.n	8004f46 <sin+0x16>
 8004f8a:	f000 fa0d 	bl	80053a8 <__kernel_cos>
 8004f8e:	e7dc      	b.n	8004f4a <sin+0x1a>
 8004f90:	2001      	movs	r0, #1
 8004f92:	f000 fe11 	bl	8005bb8 <__kernel_sin>
 8004f96:	ec53 2b10 	vmov	r2, r3, d0
 8004f9a:	ee10 0a10 	vmov	r0, s0
 8004f9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004fa2:	e7dd      	b.n	8004f60 <sin+0x30>
 8004fa4:	f000 fa00 	bl	80053a8 <__kernel_cos>
 8004fa8:	e7f5      	b.n	8004f96 <sin+0x66>
 8004faa:	bf00      	nop
 8004fac:	f3af 8000 	nop.w
	...
 8004fb8:	3fe921fb 	.word	0x3fe921fb
 8004fbc:	7fefffff 	.word	0x7fefffff

08004fc0 <__ieee754_rem_pio2>:
 8004fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc4:	ec57 6b10 	vmov	r6, r7, d0
 8004fc8:	4bc3      	ldr	r3, [pc, #780]	; (80052d8 <__ieee754_rem_pio2+0x318>)
 8004fca:	b08d      	sub	sp, #52	; 0x34
 8004fcc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004fd0:	4598      	cmp	r8, r3
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	9704      	str	r7, [sp, #16]
 8004fd6:	dc07      	bgt.n	8004fe8 <__ieee754_rem_pio2+0x28>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2300      	movs	r3, #0
 8004fdc:	ed84 0b00 	vstr	d0, [r4]
 8004fe0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	e027      	b.n	8005038 <__ieee754_rem_pio2+0x78>
 8004fe8:	4bbc      	ldr	r3, [pc, #752]	; (80052dc <__ieee754_rem_pio2+0x31c>)
 8004fea:	4598      	cmp	r8, r3
 8004fec:	dc75      	bgt.n	80050da <__ieee754_rem_pio2+0x11a>
 8004fee:	9b04      	ldr	r3, [sp, #16]
 8004ff0:	4dbb      	ldr	r5, [pc, #748]	; (80052e0 <__ieee754_rem_pio2+0x320>)
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	ee10 0a10 	vmov	r0, s0
 8004ff8:	a3a9      	add	r3, pc, #676	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x2e0>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	4639      	mov	r1, r7
 8005000:	dd36      	ble.n	8005070 <__ieee754_rem_pio2+0xb0>
 8005002:	f7fb f961 	bl	80002c8 <__aeabi_dsub>
 8005006:	45a8      	cmp	r8, r5
 8005008:	4606      	mov	r6, r0
 800500a:	460f      	mov	r7, r1
 800500c:	d018      	beq.n	8005040 <__ieee754_rem_pio2+0x80>
 800500e:	a3a6      	add	r3, pc, #664	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e8>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb f958 	bl	80002c8 <__aeabi_dsub>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	e9c4 2300 	strd	r2, r3, [r4]
 8005020:	4630      	mov	r0, r6
 8005022:	4639      	mov	r1, r7
 8005024:	f7fb f950 	bl	80002c8 <__aeabi_dsub>
 8005028:	a39f      	add	r3, pc, #636	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e8>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f7fb f94b 	bl	80002c8 <__aeabi_dsub>
 8005032:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005036:	2501      	movs	r5, #1
 8005038:	4628      	mov	r0, r5
 800503a:	b00d      	add	sp, #52	; 0x34
 800503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	a39b      	add	r3, pc, #620	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x2f0>)
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	f7fb f93f 	bl	80002c8 <__aeabi_dsub>
 800504a:	a39b      	add	r3, pc, #620	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f8>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	4606      	mov	r6, r0
 8005052:	460f      	mov	r7, r1
 8005054:	f7fb f938 	bl	80002c8 <__aeabi_dsub>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	e9c4 2300 	strd	r2, r3, [r4]
 8005060:	4630      	mov	r0, r6
 8005062:	4639      	mov	r1, r7
 8005064:	f7fb f930 	bl	80002c8 <__aeabi_dsub>
 8005068:	a393      	add	r3, pc, #588	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f8>)
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	e7de      	b.n	800502e <__ieee754_rem_pio2+0x6e>
 8005070:	f7fb f92c 	bl	80002cc <__adddf3>
 8005074:	45a8      	cmp	r8, r5
 8005076:	4606      	mov	r6, r0
 8005078:	460f      	mov	r7, r1
 800507a:	d016      	beq.n	80050aa <__ieee754_rem_pio2+0xea>
 800507c:	a38a      	add	r3, pc, #552	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e8>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	f7fb f923 	bl	80002cc <__adddf3>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	e9c4 2300 	strd	r2, r3, [r4]
 800508e:	4630      	mov	r0, r6
 8005090:	4639      	mov	r1, r7
 8005092:	f7fb f919 	bl	80002c8 <__aeabi_dsub>
 8005096:	a384      	add	r3, pc, #528	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e8>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f7fb f916 	bl	80002cc <__adddf3>
 80050a0:	f04f 35ff 	mov.w	r5, #4294967295
 80050a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050a8:	e7c6      	b.n	8005038 <__ieee754_rem_pio2+0x78>
 80050aa:	a381      	add	r3, pc, #516	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x2f0>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb f90c 	bl	80002cc <__adddf3>
 80050b4:	a380      	add	r3, pc, #512	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f8>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	4606      	mov	r6, r0
 80050bc:	460f      	mov	r7, r1
 80050be:	f7fb f905 	bl	80002cc <__adddf3>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	e9c4 2300 	strd	r2, r3, [r4]
 80050ca:	4630      	mov	r0, r6
 80050cc:	4639      	mov	r1, r7
 80050ce:	f7fb f8fb 	bl	80002c8 <__aeabi_dsub>
 80050d2:	a379      	add	r3, pc, #484	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f8>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	e7e0      	b.n	800509c <__ieee754_rem_pio2+0xdc>
 80050da:	4b82      	ldr	r3, [pc, #520]	; (80052e4 <__ieee754_rem_pio2+0x324>)
 80050dc:	4598      	cmp	r8, r3
 80050de:	f300 80d0 	bgt.w	8005282 <__ieee754_rem_pio2+0x2c2>
 80050e2:	f000 fe23 	bl	8005d2c <fabs>
 80050e6:	ec57 6b10 	vmov	r6, r7, d0
 80050ea:	ee10 0a10 	vmov	r0, s0
 80050ee:	a374      	add	r3, pc, #464	; (adr r3, 80052c0 <__ieee754_rem_pio2+0x300>)
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	4639      	mov	r1, r7
 80050f6:	f7fb fa9f 	bl	8000638 <__aeabi_dmul>
 80050fa:	2200      	movs	r2, #0
 80050fc:	4b7a      	ldr	r3, [pc, #488]	; (80052e8 <__ieee754_rem_pio2+0x328>)
 80050fe:	f7fb f8e5 	bl	80002cc <__adddf3>
 8005102:	f7fb fd33 	bl	8000b6c <__aeabi_d2iz>
 8005106:	4605      	mov	r5, r0
 8005108:	f7fb fa2c 	bl	8000564 <__aeabi_i2d>
 800510c:	a364      	add	r3, pc, #400	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x2e0>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005116:	f7fb fa8f 	bl	8000638 <__aeabi_dmul>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4630      	mov	r0, r6
 8005120:	4639      	mov	r1, r7
 8005122:	f7fb f8d1 	bl	80002c8 <__aeabi_dsub>
 8005126:	a360      	add	r3, pc, #384	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e8>)
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	4682      	mov	sl, r0
 800512e:	468b      	mov	fp, r1
 8005130:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005134:	f7fb fa80 	bl	8000638 <__aeabi_dmul>
 8005138:	2d1f      	cmp	r5, #31
 800513a:	4606      	mov	r6, r0
 800513c:	460f      	mov	r7, r1
 800513e:	dc0c      	bgt.n	800515a <__ieee754_rem_pio2+0x19a>
 8005140:	1e6a      	subs	r2, r5, #1
 8005142:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <__ieee754_rem_pio2+0x32c>)
 8005144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005148:	4543      	cmp	r3, r8
 800514a:	d006      	beq.n	800515a <__ieee754_rem_pio2+0x19a>
 800514c:	4632      	mov	r2, r6
 800514e:	463b      	mov	r3, r7
 8005150:	4650      	mov	r0, sl
 8005152:	4659      	mov	r1, fp
 8005154:	f7fb f8b8 	bl	80002c8 <__aeabi_dsub>
 8005158:	e00e      	b.n	8005178 <__ieee754_rem_pio2+0x1b8>
 800515a:	4632      	mov	r2, r6
 800515c:	463b      	mov	r3, r7
 800515e:	4650      	mov	r0, sl
 8005160:	4659      	mov	r1, fp
 8005162:	f7fb f8b1 	bl	80002c8 <__aeabi_dsub>
 8005166:	ea4f 5328 	mov.w	r3, r8, asr #20
 800516a:	9305      	str	r3, [sp, #20]
 800516c:	9a05      	ldr	r2, [sp, #20]
 800516e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b10      	cmp	r3, #16
 8005176:	dc02      	bgt.n	800517e <__ieee754_rem_pio2+0x1be>
 8005178:	e9c4 0100 	strd	r0, r1, [r4]
 800517c:	e039      	b.n	80051f2 <__ieee754_rem_pio2+0x232>
 800517e:	a34c      	add	r3, pc, #304	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x2f0>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005188:	f7fb fa56 	bl	8000638 <__aeabi_dmul>
 800518c:	4606      	mov	r6, r0
 800518e:	460f      	mov	r7, r1
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4650      	mov	r0, sl
 8005196:	4659      	mov	r1, fp
 8005198:	f7fb f896 	bl	80002c8 <__aeabi_dsub>
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4680      	mov	r8, r0
 80051a2:	4689      	mov	r9, r1
 80051a4:	4650      	mov	r0, sl
 80051a6:	4659      	mov	r1, fp
 80051a8:	f7fb f88e 	bl	80002c8 <__aeabi_dsub>
 80051ac:	4632      	mov	r2, r6
 80051ae:	463b      	mov	r3, r7
 80051b0:	f7fb f88a 	bl	80002c8 <__aeabi_dsub>
 80051b4:	a340      	add	r3, pc, #256	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f8>)
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	4606      	mov	r6, r0
 80051bc:	460f      	mov	r7, r1
 80051be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c2:	f7fb fa39 	bl	8000638 <__aeabi_dmul>
 80051c6:	4632      	mov	r2, r6
 80051c8:	463b      	mov	r3, r7
 80051ca:	f7fb f87d 	bl	80002c8 <__aeabi_dsub>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4606      	mov	r6, r0
 80051d4:	460f      	mov	r7, r1
 80051d6:	4640      	mov	r0, r8
 80051d8:	4649      	mov	r1, r9
 80051da:	f7fb f875 	bl	80002c8 <__aeabi_dsub>
 80051de:	9a05      	ldr	r2, [sp, #20]
 80051e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b31      	cmp	r3, #49	; 0x31
 80051e8:	dc20      	bgt.n	800522c <__ieee754_rem_pio2+0x26c>
 80051ea:	e9c4 0100 	strd	r0, r1, [r4]
 80051ee:	46c2      	mov	sl, r8
 80051f0:	46cb      	mov	fp, r9
 80051f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80051f6:	4650      	mov	r0, sl
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	4659      	mov	r1, fp
 80051fe:	f7fb f863 	bl	80002c8 <__aeabi_dsub>
 8005202:	463b      	mov	r3, r7
 8005204:	4632      	mov	r2, r6
 8005206:	f7fb f85f 	bl	80002c8 <__aeabi_dsub>
 800520a:	9b04      	ldr	r3, [sp, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005212:	f6bf af11 	bge.w	8005038 <__ieee754_rem_pio2+0x78>
 8005216:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	f8c4 8000 	str.w	r8, [r4]
 8005220:	60a0      	str	r0, [r4, #8]
 8005222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005226:	60e3      	str	r3, [r4, #12]
 8005228:	426d      	negs	r5, r5
 800522a:	e705      	b.n	8005038 <__ieee754_rem_pio2+0x78>
 800522c:	a326      	add	r3, pc, #152	; (adr r3, 80052c8 <__ieee754_rem_pio2+0x308>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005236:	f7fb f9ff 	bl	8000638 <__aeabi_dmul>
 800523a:	4606      	mov	r6, r0
 800523c:	460f      	mov	r7, r1
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb f83f 	bl	80002c8 <__aeabi_dsub>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4682      	mov	sl, r0
 8005250:	468b      	mov	fp, r1
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f7fb f837 	bl	80002c8 <__aeabi_dsub>
 800525a:	4632      	mov	r2, r6
 800525c:	463b      	mov	r3, r7
 800525e:	f7fb f833 	bl	80002c8 <__aeabi_dsub>
 8005262:	a31b      	add	r3, pc, #108	; (adr r3, 80052d0 <__ieee754_rem_pio2+0x310>)
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	4606      	mov	r6, r0
 800526a:	460f      	mov	r7, r1
 800526c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005270:	f7fb f9e2 	bl	8000638 <__aeabi_dmul>
 8005274:	4632      	mov	r2, r6
 8005276:	463b      	mov	r3, r7
 8005278:	f7fb f826 	bl	80002c8 <__aeabi_dsub>
 800527c:	4606      	mov	r6, r0
 800527e:	460f      	mov	r7, r1
 8005280:	e764      	b.n	800514c <__ieee754_rem_pio2+0x18c>
 8005282:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <__ieee754_rem_pio2+0x330>)
 8005284:	4598      	cmp	r8, r3
 8005286:	dd35      	ble.n	80052f4 <__ieee754_rem_pio2+0x334>
 8005288:	ee10 2a10 	vmov	r2, s0
 800528c:	463b      	mov	r3, r7
 800528e:	4630      	mov	r0, r6
 8005290:	4639      	mov	r1, r7
 8005292:	f7fb f819 	bl	80002c8 <__aeabi_dsub>
 8005296:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800529a:	e9c4 0100 	strd	r0, r1, [r4]
 800529e:	e6a1      	b.n	8004fe4 <__ieee754_rem_pio2+0x24>
 80052a0:	54400000 	.word	0x54400000
 80052a4:	3ff921fb 	.word	0x3ff921fb
 80052a8:	1a626331 	.word	0x1a626331
 80052ac:	3dd0b461 	.word	0x3dd0b461
 80052b0:	1a600000 	.word	0x1a600000
 80052b4:	3dd0b461 	.word	0x3dd0b461
 80052b8:	2e037073 	.word	0x2e037073
 80052bc:	3ba3198a 	.word	0x3ba3198a
 80052c0:	6dc9c883 	.word	0x6dc9c883
 80052c4:	3fe45f30 	.word	0x3fe45f30
 80052c8:	2e000000 	.word	0x2e000000
 80052cc:	3ba3198a 	.word	0x3ba3198a
 80052d0:	252049c1 	.word	0x252049c1
 80052d4:	397b839a 	.word	0x397b839a
 80052d8:	3fe921fb 	.word	0x3fe921fb
 80052dc:	4002d97b 	.word	0x4002d97b
 80052e0:	3ff921fb 	.word	0x3ff921fb
 80052e4:	413921fb 	.word	0x413921fb
 80052e8:	3fe00000 	.word	0x3fe00000
 80052ec:	08005fdc 	.word	0x08005fdc
 80052f0:	7fefffff 	.word	0x7fefffff
 80052f4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80052f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80052fc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005300:	4630      	mov	r0, r6
 8005302:	460f      	mov	r7, r1
 8005304:	f7fb fc32 	bl	8000b6c <__aeabi_d2iz>
 8005308:	f7fb f92c 	bl	8000564 <__aeabi_i2d>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4630      	mov	r0, r6
 8005312:	4639      	mov	r1, r7
 8005314:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005318:	f7fa ffd6 	bl	80002c8 <__aeabi_dsub>
 800531c:	2200      	movs	r2, #0
 800531e:	4b1f      	ldr	r3, [pc, #124]	; (800539c <__ieee754_rem_pio2+0x3dc>)
 8005320:	f7fb f98a 	bl	8000638 <__aeabi_dmul>
 8005324:	460f      	mov	r7, r1
 8005326:	4606      	mov	r6, r0
 8005328:	f7fb fc20 	bl	8000b6c <__aeabi_d2iz>
 800532c:	f7fb f91a 	bl	8000564 <__aeabi_i2d>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4630      	mov	r0, r6
 8005336:	4639      	mov	r1, r7
 8005338:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800533c:	f7fa ffc4 	bl	80002c8 <__aeabi_dsub>
 8005340:	2200      	movs	r2, #0
 8005342:	4b16      	ldr	r3, [pc, #88]	; (800539c <__ieee754_rem_pio2+0x3dc>)
 8005344:	f7fb f978 	bl	8000638 <__aeabi_dmul>
 8005348:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800534c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005350:	f04f 0803 	mov.w	r8, #3
 8005354:	2600      	movs	r6, #0
 8005356:	2700      	movs	r7, #0
 8005358:	4632      	mov	r2, r6
 800535a:	463b      	mov	r3, r7
 800535c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005360:	f108 3aff 	add.w	sl, r8, #4294967295
 8005364:	f7fb fbd0 	bl	8000b08 <__aeabi_dcmpeq>
 8005368:	b9b0      	cbnz	r0, 8005398 <__ieee754_rem_pio2+0x3d8>
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <__ieee754_rem_pio2+0x3e0>)
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	2302      	movs	r3, #2
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	462a      	mov	r2, r5
 8005374:	4643      	mov	r3, r8
 8005376:	4621      	mov	r1, r4
 8005378:	a806      	add	r0, sp, #24
 800537a:	f000 f8dd 	bl	8005538 <__kernel_rem_pio2>
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	4605      	mov	r5, r0
 8005384:	f6bf ae58 	bge.w	8005038 <__ieee754_rem_pio2+0x78>
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	68e3      	ldr	r3, [r4, #12]
 8005392:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005396:	e746      	b.n	8005226 <__ieee754_rem_pio2+0x266>
 8005398:	46d0      	mov	r8, sl
 800539a:	e7dd      	b.n	8005358 <__ieee754_rem_pio2+0x398>
 800539c:	41700000 	.word	0x41700000
 80053a0:	0800605c 	.word	0x0800605c
 80053a4:	00000000 	.word	0x00000000

080053a8 <__kernel_cos>:
 80053a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	ec59 8b10 	vmov	r8, r9, d0
 80053b0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80053b4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80053b8:	ed2d 8b02 	vpush	{d8}
 80053bc:	eeb0 8a41 	vmov.f32	s16, s2
 80053c0:	eef0 8a61 	vmov.f32	s17, s3
 80053c4:	da07      	bge.n	80053d6 <__kernel_cos+0x2e>
 80053c6:	ee10 0a10 	vmov	r0, s0
 80053ca:	4649      	mov	r1, r9
 80053cc:	f7fb fbce 	bl	8000b6c <__aeabi_d2iz>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	f000 8089 	beq.w	80054e8 <__kernel_cos+0x140>
 80053d6:	4642      	mov	r2, r8
 80053d8:	464b      	mov	r3, r9
 80053da:	4640      	mov	r0, r8
 80053dc:	4649      	mov	r1, r9
 80053de:	f7fb f92b 	bl	8000638 <__aeabi_dmul>
 80053e2:	2200      	movs	r2, #0
 80053e4:	4b4e      	ldr	r3, [pc, #312]	; (8005520 <__kernel_cos+0x178>)
 80053e6:	4604      	mov	r4, r0
 80053e8:	460d      	mov	r5, r1
 80053ea:	f7fb f925 	bl	8000638 <__aeabi_dmul>
 80053ee:	a340      	add	r3, pc, #256	; (adr r3, 80054f0 <__kernel_cos+0x148>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	4682      	mov	sl, r0
 80053f6:	468b      	mov	fp, r1
 80053f8:	4620      	mov	r0, r4
 80053fa:	4629      	mov	r1, r5
 80053fc:	f7fb f91c 	bl	8000638 <__aeabi_dmul>
 8005400:	a33d      	add	r3, pc, #244	; (adr r3, 80054f8 <__kernel_cos+0x150>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f7fa ff61 	bl	80002cc <__adddf3>
 800540a:	4622      	mov	r2, r4
 800540c:	462b      	mov	r3, r5
 800540e:	f7fb f913 	bl	8000638 <__aeabi_dmul>
 8005412:	a33b      	add	r3, pc, #236	; (adr r3, 8005500 <__kernel_cos+0x158>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa ff56 	bl	80002c8 <__aeabi_dsub>
 800541c:	4622      	mov	r2, r4
 800541e:	462b      	mov	r3, r5
 8005420:	f7fb f90a 	bl	8000638 <__aeabi_dmul>
 8005424:	a338      	add	r3, pc, #224	; (adr r3, 8005508 <__kernel_cos+0x160>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa ff4f 	bl	80002cc <__adddf3>
 800542e:	4622      	mov	r2, r4
 8005430:	462b      	mov	r3, r5
 8005432:	f7fb f901 	bl	8000638 <__aeabi_dmul>
 8005436:	a336      	add	r3, pc, #216	; (adr r3, 8005510 <__kernel_cos+0x168>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f7fa ff44 	bl	80002c8 <__aeabi_dsub>
 8005440:	4622      	mov	r2, r4
 8005442:	462b      	mov	r3, r5
 8005444:	f7fb f8f8 	bl	8000638 <__aeabi_dmul>
 8005448:	a333      	add	r3, pc, #204	; (adr r3, 8005518 <__kernel_cos+0x170>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fa ff3d 	bl	80002cc <__adddf3>
 8005452:	4622      	mov	r2, r4
 8005454:	462b      	mov	r3, r5
 8005456:	f7fb f8ef 	bl	8000638 <__aeabi_dmul>
 800545a:	4622      	mov	r2, r4
 800545c:	462b      	mov	r3, r5
 800545e:	f7fb f8eb 	bl	8000638 <__aeabi_dmul>
 8005462:	ec53 2b18 	vmov	r2, r3, d8
 8005466:	4604      	mov	r4, r0
 8005468:	460d      	mov	r5, r1
 800546a:	4640      	mov	r0, r8
 800546c:	4649      	mov	r1, r9
 800546e:	f7fb f8e3 	bl	8000638 <__aeabi_dmul>
 8005472:	460b      	mov	r3, r1
 8005474:	4602      	mov	r2, r0
 8005476:	4629      	mov	r1, r5
 8005478:	4620      	mov	r0, r4
 800547a:	f7fa ff25 	bl	80002c8 <__aeabi_dsub>
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <__kernel_cos+0x17c>)
 8005480:	429e      	cmp	r6, r3
 8005482:	4680      	mov	r8, r0
 8005484:	4689      	mov	r9, r1
 8005486:	dc11      	bgt.n	80054ac <__kernel_cos+0x104>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4650      	mov	r0, sl
 800548e:	4659      	mov	r1, fp
 8005490:	f7fa ff1a 	bl	80002c8 <__aeabi_dsub>
 8005494:	460b      	mov	r3, r1
 8005496:	4924      	ldr	r1, [pc, #144]	; (8005528 <__kernel_cos+0x180>)
 8005498:	4602      	mov	r2, r0
 800549a:	2000      	movs	r0, #0
 800549c:	f7fa ff14 	bl	80002c8 <__aeabi_dsub>
 80054a0:	ecbd 8b02 	vpop	{d8}
 80054a4:	ec41 0b10 	vmov	d0, r0, r1
 80054a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ac:	4b1f      	ldr	r3, [pc, #124]	; (800552c <__kernel_cos+0x184>)
 80054ae:	491e      	ldr	r1, [pc, #120]	; (8005528 <__kernel_cos+0x180>)
 80054b0:	429e      	cmp	r6, r3
 80054b2:	bfcc      	ite	gt
 80054b4:	4d1e      	ldrgt	r5, [pc, #120]	; (8005530 <__kernel_cos+0x188>)
 80054b6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80054ba:	2400      	movs	r4, #0
 80054bc:	4622      	mov	r2, r4
 80054be:	462b      	mov	r3, r5
 80054c0:	2000      	movs	r0, #0
 80054c2:	f7fa ff01 	bl	80002c8 <__aeabi_dsub>
 80054c6:	4622      	mov	r2, r4
 80054c8:	4606      	mov	r6, r0
 80054ca:	460f      	mov	r7, r1
 80054cc:	462b      	mov	r3, r5
 80054ce:	4650      	mov	r0, sl
 80054d0:	4659      	mov	r1, fp
 80054d2:	f7fa fef9 	bl	80002c8 <__aeabi_dsub>
 80054d6:	4642      	mov	r2, r8
 80054d8:	464b      	mov	r3, r9
 80054da:	f7fa fef5 	bl	80002c8 <__aeabi_dsub>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4630      	mov	r0, r6
 80054e4:	4639      	mov	r1, r7
 80054e6:	e7d9      	b.n	800549c <__kernel_cos+0xf4>
 80054e8:	2000      	movs	r0, #0
 80054ea:	490f      	ldr	r1, [pc, #60]	; (8005528 <__kernel_cos+0x180>)
 80054ec:	e7d8      	b.n	80054a0 <__kernel_cos+0xf8>
 80054ee:	bf00      	nop
 80054f0:	be8838d4 	.word	0xbe8838d4
 80054f4:	bda8fae9 	.word	0xbda8fae9
 80054f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80054fc:	3e21ee9e 	.word	0x3e21ee9e
 8005500:	809c52ad 	.word	0x809c52ad
 8005504:	3e927e4f 	.word	0x3e927e4f
 8005508:	19cb1590 	.word	0x19cb1590
 800550c:	3efa01a0 	.word	0x3efa01a0
 8005510:	16c15177 	.word	0x16c15177
 8005514:	3f56c16c 	.word	0x3f56c16c
 8005518:	5555554c 	.word	0x5555554c
 800551c:	3fa55555 	.word	0x3fa55555
 8005520:	3fe00000 	.word	0x3fe00000
 8005524:	3fd33332 	.word	0x3fd33332
 8005528:	3ff00000 	.word	0x3ff00000
 800552c:	3fe90000 	.word	0x3fe90000
 8005530:	3fd20000 	.word	0x3fd20000
 8005534:	00000000 	.word	0x00000000

08005538 <__kernel_rem_pio2>:
 8005538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553c:	ed2d 8b02 	vpush	{d8}
 8005540:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005544:	1ed4      	subs	r4, r2, #3
 8005546:	9308      	str	r3, [sp, #32]
 8005548:	9101      	str	r1, [sp, #4]
 800554a:	4bc5      	ldr	r3, [pc, #788]	; (8005860 <__kernel_rem_pio2+0x328>)
 800554c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800554e:	9009      	str	r0, [sp, #36]	; 0x24
 8005550:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005554:	9304      	str	r3, [sp, #16]
 8005556:	9b08      	ldr	r3, [sp, #32]
 8005558:	3b01      	subs	r3, #1
 800555a:	9307      	str	r3, [sp, #28]
 800555c:	2318      	movs	r3, #24
 800555e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005562:	f06f 0317 	mvn.w	r3, #23
 8005566:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800556a:	fb04 3303 	mla	r3, r4, r3, r3
 800556e:	eb03 0a02 	add.w	sl, r3, r2
 8005572:	9b04      	ldr	r3, [sp, #16]
 8005574:	9a07      	ldr	r2, [sp, #28]
 8005576:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005850 <__kernel_rem_pio2+0x318>
 800557a:	eb03 0802 	add.w	r8, r3, r2
 800557e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005580:	1aa7      	subs	r7, r4, r2
 8005582:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005586:	ae22      	add	r6, sp, #136	; 0x88
 8005588:	2500      	movs	r5, #0
 800558a:	4545      	cmp	r5, r8
 800558c:	dd13      	ble.n	80055b6 <__kernel_rem_pio2+0x7e>
 800558e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005850 <__kernel_rem_pio2+0x318>
 8005592:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005596:	2600      	movs	r6, #0
 8005598:	9b04      	ldr	r3, [sp, #16]
 800559a:	429e      	cmp	r6, r3
 800559c:	dc32      	bgt.n	8005604 <__kernel_rem_pio2+0xcc>
 800559e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a0:	9302      	str	r3, [sp, #8]
 80055a2:	9b08      	ldr	r3, [sp, #32]
 80055a4:	199d      	adds	r5, r3, r6
 80055a6:	ab22      	add	r3, sp, #136	; 0x88
 80055a8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80055ac:	9306      	str	r3, [sp, #24]
 80055ae:	ec59 8b18 	vmov	r8, r9, d8
 80055b2:	2700      	movs	r7, #0
 80055b4:	e01f      	b.n	80055f6 <__kernel_rem_pio2+0xbe>
 80055b6:	42ef      	cmn	r7, r5
 80055b8:	d407      	bmi.n	80055ca <__kernel_rem_pio2+0x92>
 80055ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80055be:	f7fa ffd1 	bl	8000564 <__aeabi_i2d>
 80055c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80055c6:	3501      	adds	r5, #1
 80055c8:	e7df      	b.n	800558a <__kernel_rem_pio2+0x52>
 80055ca:	ec51 0b18 	vmov	r0, r1, d8
 80055ce:	e7f8      	b.n	80055c2 <__kernel_rem_pio2+0x8a>
 80055d0:	9906      	ldr	r1, [sp, #24]
 80055d2:	9d02      	ldr	r5, [sp, #8]
 80055d4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80055d8:	9106      	str	r1, [sp, #24]
 80055da:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80055de:	9502      	str	r5, [sp, #8]
 80055e0:	f7fb f82a 	bl	8000638 <__aeabi_dmul>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4640      	mov	r0, r8
 80055ea:	4649      	mov	r1, r9
 80055ec:	f7fa fe6e 	bl	80002cc <__adddf3>
 80055f0:	3701      	adds	r7, #1
 80055f2:	4680      	mov	r8, r0
 80055f4:	4689      	mov	r9, r1
 80055f6:	9b07      	ldr	r3, [sp, #28]
 80055f8:	429f      	cmp	r7, r3
 80055fa:	dde9      	ble.n	80055d0 <__kernel_rem_pio2+0x98>
 80055fc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005600:	3601      	adds	r6, #1
 8005602:	e7c9      	b.n	8005598 <__kernel_rem_pio2+0x60>
 8005604:	9b04      	ldr	r3, [sp, #16]
 8005606:	aa0e      	add	r2, sp, #56	; 0x38
 8005608:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800560c:	930c      	str	r3, [sp, #48]	; 0x30
 800560e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005610:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005614:	9c04      	ldr	r4, [sp, #16]
 8005616:	930b      	str	r3, [sp, #44]	; 0x2c
 8005618:	ab9a      	add	r3, sp, #616	; 0x268
 800561a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800561e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005622:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005626:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800562a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800562e:	ab9a      	add	r3, sp, #616	; 0x268
 8005630:	445b      	add	r3, fp
 8005632:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8005636:	2500      	movs	r5, #0
 8005638:	1b63      	subs	r3, r4, r5
 800563a:	2b00      	cmp	r3, #0
 800563c:	dc78      	bgt.n	8005730 <__kernel_rem_pio2+0x1f8>
 800563e:	4650      	mov	r0, sl
 8005640:	ec49 8b10 	vmov	d0, r8, r9
 8005644:	f000 fc00 	bl	8005e48 <scalbn>
 8005648:	ec57 6b10 	vmov	r6, r7, d0
 800564c:	2200      	movs	r2, #0
 800564e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005652:	ee10 0a10 	vmov	r0, s0
 8005656:	4639      	mov	r1, r7
 8005658:	f7fa ffee 	bl	8000638 <__aeabi_dmul>
 800565c:	ec41 0b10 	vmov	d0, r0, r1
 8005660:	f000 fb6e 	bl	8005d40 <floor>
 8005664:	2200      	movs	r2, #0
 8005666:	ec51 0b10 	vmov	r0, r1, d0
 800566a:	4b7e      	ldr	r3, [pc, #504]	; (8005864 <__kernel_rem_pio2+0x32c>)
 800566c:	f7fa ffe4 	bl	8000638 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4630      	mov	r0, r6
 8005676:	4639      	mov	r1, r7
 8005678:	f7fa fe26 	bl	80002c8 <__aeabi_dsub>
 800567c:	460f      	mov	r7, r1
 800567e:	4606      	mov	r6, r0
 8005680:	f7fb fa74 	bl	8000b6c <__aeabi_d2iz>
 8005684:	9006      	str	r0, [sp, #24]
 8005686:	f7fa ff6d 	bl	8000564 <__aeabi_i2d>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4630      	mov	r0, r6
 8005690:	4639      	mov	r1, r7
 8005692:	f7fa fe19 	bl	80002c8 <__aeabi_dsub>
 8005696:	f1ba 0f00 	cmp.w	sl, #0
 800569a:	4606      	mov	r6, r0
 800569c:	460f      	mov	r7, r1
 800569e:	dd6c      	ble.n	800577a <__kernel_rem_pio2+0x242>
 80056a0:	1e62      	subs	r2, r4, #1
 80056a2:	ab0e      	add	r3, sp, #56	; 0x38
 80056a4:	f1ca 0118 	rsb	r1, sl, #24
 80056a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80056ac:	9d06      	ldr	r5, [sp, #24]
 80056ae:	fa40 f301 	asr.w	r3, r0, r1
 80056b2:	441d      	add	r5, r3
 80056b4:	408b      	lsls	r3, r1
 80056b6:	1ac0      	subs	r0, r0, r3
 80056b8:	ab0e      	add	r3, sp, #56	; 0x38
 80056ba:	9506      	str	r5, [sp, #24]
 80056bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80056c0:	f1ca 0317 	rsb	r3, sl, #23
 80056c4:	fa40 f303 	asr.w	r3, r0, r3
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	9b02      	ldr	r3, [sp, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	dd62      	ble.n	8005796 <__kernel_rem_pio2+0x25e>
 80056d0:	9b06      	ldr	r3, [sp, #24]
 80056d2:	2200      	movs	r2, #0
 80056d4:	3301      	adds	r3, #1
 80056d6:	9306      	str	r3, [sp, #24]
 80056d8:	4615      	mov	r5, r2
 80056da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80056de:	4294      	cmp	r4, r2
 80056e0:	f300 8095 	bgt.w	800580e <__kernel_rem_pio2+0x2d6>
 80056e4:	f1ba 0f00 	cmp.w	sl, #0
 80056e8:	dd07      	ble.n	80056fa <__kernel_rem_pio2+0x1c2>
 80056ea:	f1ba 0f01 	cmp.w	sl, #1
 80056ee:	f000 80a2 	beq.w	8005836 <__kernel_rem_pio2+0x2fe>
 80056f2:	f1ba 0f02 	cmp.w	sl, #2
 80056f6:	f000 80c1 	beq.w	800587c <__kernel_rem_pio2+0x344>
 80056fa:	9b02      	ldr	r3, [sp, #8]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d14a      	bne.n	8005796 <__kernel_rem_pio2+0x25e>
 8005700:	4632      	mov	r2, r6
 8005702:	463b      	mov	r3, r7
 8005704:	2000      	movs	r0, #0
 8005706:	4958      	ldr	r1, [pc, #352]	; (8005868 <__kernel_rem_pio2+0x330>)
 8005708:	f7fa fdde 	bl	80002c8 <__aeabi_dsub>
 800570c:	4606      	mov	r6, r0
 800570e:	460f      	mov	r7, r1
 8005710:	2d00      	cmp	r5, #0
 8005712:	d040      	beq.n	8005796 <__kernel_rem_pio2+0x25e>
 8005714:	4650      	mov	r0, sl
 8005716:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005858 <__kernel_rem_pio2+0x320>
 800571a:	f000 fb95 	bl	8005e48 <scalbn>
 800571e:	4630      	mov	r0, r6
 8005720:	4639      	mov	r1, r7
 8005722:	ec53 2b10 	vmov	r2, r3, d0
 8005726:	f7fa fdcf 	bl	80002c8 <__aeabi_dsub>
 800572a:	4606      	mov	r6, r0
 800572c:	460f      	mov	r7, r1
 800572e:	e032      	b.n	8005796 <__kernel_rem_pio2+0x25e>
 8005730:	2200      	movs	r2, #0
 8005732:	4b4e      	ldr	r3, [pc, #312]	; (800586c <__kernel_rem_pio2+0x334>)
 8005734:	4640      	mov	r0, r8
 8005736:	4649      	mov	r1, r9
 8005738:	f7fa ff7e 	bl	8000638 <__aeabi_dmul>
 800573c:	f7fb fa16 	bl	8000b6c <__aeabi_d2iz>
 8005740:	f7fa ff10 	bl	8000564 <__aeabi_i2d>
 8005744:	2200      	movs	r2, #0
 8005746:	4b4a      	ldr	r3, [pc, #296]	; (8005870 <__kernel_rem_pio2+0x338>)
 8005748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574c:	f7fa ff74 	bl	8000638 <__aeabi_dmul>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4640      	mov	r0, r8
 8005756:	4649      	mov	r1, r9
 8005758:	f7fa fdb6 	bl	80002c8 <__aeabi_dsub>
 800575c:	f7fb fa06 	bl	8000b6c <__aeabi_d2iz>
 8005760:	ab0e      	add	r3, sp, #56	; 0x38
 8005762:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8005766:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800576a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800576e:	f7fa fdad 	bl	80002cc <__adddf3>
 8005772:	3501      	adds	r5, #1
 8005774:	4680      	mov	r8, r0
 8005776:	4689      	mov	r9, r1
 8005778:	e75e      	b.n	8005638 <__kernel_rem_pio2+0x100>
 800577a:	d105      	bne.n	8005788 <__kernel_rem_pio2+0x250>
 800577c:	1e63      	subs	r3, r4, #1
 800577e:	aa0e      	add	r2, sp, #56	; 0x38
 8005780:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005784:	15c3      	asrs	r3, r0, #23
 8005786:	e79f      	b.n	80056c8 <__kernel_rem_pio2+0x190>
 8005788:	2200      	movs	r2, #0
 800578a:	4b3a      	ldr	r3, [pc, #232]	; (8005874 <__kernel_rem_pio2+0x33c>)
 800578c:	f7fb f9da 	bl	8000b44 <__aeabi_dcmpge>
 8005790:	2800      	cmp	r0, #0
 8005792:	d139      	bne.n	8005808 <__kernel_rem_pio2+0x2d0>
 8005794:	9002      	str	r0, [sp, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	4630      	mov	r0, r6
 800579c:	4639      	mov	r1, r7
 800579e:	f7fb f9b3 	bl	8000b08 <__aeabi_dcmpeq>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	f000 80c7 	beq.w	8005936 <__kernel_rem_pio2+0x3fe>
 80057a8:	1e65      	subs	r5, r4, #1
 80057aa:	462b      	mov	r3, r5
 80057ac:	2200      	movs	r2, #0
 80057ae:	9904      	ldr	r1, [sp, #16]
 80057b0:	428b      	cmp	r3, r1
 80057b2:	da6a      	bge.n	800588a <__kernel_rem_pio2+0x352>
 80057b4:	2a00      	cmp	r2, #0
 80057b6:	f000 8088 	beq.w	80058ca <__kernel_rem_pio2+0x392>
 80057ba:	ab0e      	add	r3, sp, #56	; 0x38
 80057bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80057c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80b4 	beq.w	8005932 <__kernel_rem_pio2+0x3fa>
 80057ca:	4650      	mov	r0, sl
 80057cc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005858 <__kernel_rem_pio2+0x320>
 80057d0:	f000 fb3a 	bl	8005e48 <scalbn>
 80057d4:	00ec      	lsls	r4, r5, #3
 80057d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80057d8:	191e      	adds	r6, r3, r4
 80057da:	ec59 8b10 	vmov	r8, r9, d0
 80057de:	f106 0a08 	add.w	sl, r6, #8
 80057e2:	462f      	mov	r7, r5
 80057e4:	2f00      	cmp	r7, #0
 80057e6:	f280 80df 	bge.w	80059a8 <__kernel_rem_pio2+0x470>
 80057ea:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005850 <__kernel_rem_pio2+0x318>
 80057ee:	f04f 0a00 	mov.w	sl, #0
 80057f2:	eba5 030a 	sub.w	r3, r5, sl
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f2c0 810a 	blt.w	8005a10 <__kernel_rem_pio2+0x4d8>
 80057fc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005878 <__kernel_rem_pio2+0x340>
 8005800:	ec59 8b18 	vmov	r8, r9, d8
 8005804:	2700      	movs	r7, #0
 8005806:	e0f5      	b.n	80059f4 <__kernel_rem_pio2+0x4bc>
 8005808:	2302      	movs	r3, #2
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	e760      	b.n	80056d0 <__kernel_rem_pio2+0x198>
 800580e:	ab0e      	add	r3, sp, #56	; 0x38
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	b94d      	cbnz	r5, 800582a <__kernel_rem_pio2+0x2f2>
 8005816:	b12b      	cbz	r3, 8005824 <__kernel_rem_pio2+0x2ec>
 8005818:	a80e      	add	r0, sp, #56	; 0x38
 800581a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800581e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005822:	2301      	movs	r3, #1
 8005824:	3201      	adds	r2, #1
 8005826:	461d      	mov	r5, r3
 8005828:	e759      	b.n	80056de <__kernel_rem_pio2+0x1a6>
 800582a:	a80e      	add	r0, sp, #56	; 0x38
 800582c:	1acb      	subs	r3, r1, r3
 800582e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005832:	462b      	mov	r3, r5
 8005834:	e7f6      	b.n	8005824 <__kernel_rem_pio2+0x2ec>
 8005836:	1e62      	subs	r2, r4, #1
 8005838:	ab0e      	add	r3, sp, #56	; 0x38
 800583a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800583e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005842:	a90e      	add	r1, sp, #56	; 0x38
 8005844:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005848:	e757      	b.n	80056fa <__kernel_rem_pio2+0x1c2>
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w
	...
 800585c:	3ff00000 	.word	0x3ff00000
 8005860:	080061a8 	.word	0x080061a8
 8005864:	40200000 	.word	0x40200000
 8005868:	3ff00000 	.word	0x3ff00000
 800586c:	3e700000 	.word	0x3e700000
 8005870:	41700000 	.word	0x41700000
 8005874:	3fe00000 	.word	0x3fe00000
 8005878:	08006168 	.word	0x08006168
 800587c:	1e62      	subs	r2, r4, #1
 800587e:	ab0e      	add	r3, sp, #56	; 0x38
 8005880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005884:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005888:	e7db      	b.n	8005842 <__kernel_rem_pio2+0x30a>
 800588a:	a90e      	add	r1, sp, #56	; 0x38
 800588c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005890:	3b01      	subs	r3, #1
 8005892:	430a      	orrs	r2, r1
 8005894:	e78b      	b.n	80057ae <__kernel_rem_pio2+0x276>
 8005896:	3301      	adds	r3, #1
 8005898:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800589c:	2900      	cmp	r1, #0
 800589e:	d0fa      	beq.n	8005896 <__kernel_rem_pio2+0x35e>
 80058a0:	9a08      	ldr	r2, [sp, #32]
 80058a2:	4422      	add	r2, r4
 80058a4:	00d2      	lsls	r2, r2, #3
 80058a6:	a922      	add	r1, sp, #136	; 0x88
 80058a8:	18e3      	adds	r3, r4, r3
 80058aa:	9206      	str	r2, [sp, #24]
 80058ac:	440a      	add	r2, r1
 80058ae:	9302      	str	r3, [sp, #8]
 80058b0:	f10b 0108 	add.w	r1, fp, #8
 80058b4:	f102 0308 	add.w	r3, r2, #8
 80058b8:	1c66      	adds	r6, r4, #1
 80058ba:	910a      	str	r1, [sp, #40]	; 0x28
 80058bc:	2500      	movs	r5, #0
 80058be:	930d      	str	r3, [sp, #52]	; 0x34
 80058c0:	9b02      	ldr	r3, [sp, #8]
 80058c2:	42b3      	cmp	r3, r6
 80058c4:	da04      	bge.n	80058d0 <__kernel_rem_pio2+0x398>
 80058c6:	461c      	mov	r4, r3
 80058c8:	e6a6      	b.n	8005618 <__kernel_rem_pio2+0xe0>
 80058ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058cc:	2301      	movs	r3, #1
 80058ce:	e7e3      	b.n	8005898 <__kernel_rem_pio2+0x360>
 80058d0:	9b06      	ldr	r3, [sp, #24]
 80058d2:	18ef      	adds	r7, r5, r3
 80058d4:	ab22      	add	r3, sp, #136	; 0x88
 80058d6:	441f      	add	r7, r3
 80058d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058de:	f7fa fe41 	bl	8000564 <__aeabi_i2d>
 80058e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e4:	461c      	mov	r4, r3
 80058e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058e8:	e9c7 0100 	strd	r0, r1, [r7]
 80058ec:	eb03 0b05 	add.w	fp, r3, r5
 80058f0:	2700      	movs	r7, #0
 80058f2:	f04f 0800 	mov.w	r8, #0
 80058f6:	f04f 0900 	mov.w	r9, #0
 80058fa:	9b07      	ldr	r3, [sp, #28]
 80058fc:	429f      	cmp	r7, r3
 80058fe:	dd08      	ble.n	8005912 <__kernel_rem_pio2+0x3da>
 8005900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005902:	aa72      	add	r2, sp, #456	; 0x1c8
 8005904:	18eb      	adds	r3, r5, r3
 8005906:	4413      	add	r3, r2
 8005908:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800590c:	3601      	adds	r6, #1
 800590e:	3508      	adds	r5, #8
 8005910:	e7d6      	b.n	80058c0 <__kernel_rem_pio2+0x388>
 8005912:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005916:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800591a:	f7fa fe8d 	bl	8000638 <__aeabi_dmul>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4640      	mov	r0, r8
 8005924:	4649      	mov	r1, r9
 8005926:	f7fa fcd1 	bl	80002cc <__adddf3>
 800592a:	3701      	adds	r7, #1
 800592c:	4680      	mov	r8, r0
 800592e:	4689      	mov	r9, r1
 8005930:	e7e3      	b.n	80058fa <__kernel_rem_pio2+0x3c2>
 8005932:	3d01      	subs	r5, #1
 8005934:	e741      	b.n	80057ba <__kernel_rem_pio2+0x282>
 8005936:	f1ca 0000 	rsb	r0, sl, #0
 800593a:	ec47 6b10 	vmov	d0, r6, r7
 800593e:	f000 fa83 	bl	8005e48 <scalbn>
 8005942:	ec57 6b10 	vmov	r6, r7, d0
 8005946:	2200      	movs	r2, #0
 8005948:	4b99      	ldr	r3, [pc, #612]	; (8005bb0 <__kernel_rem_pio2+0x678>)
 800594a:	ee10 0a10 	vmov	r0, s0
 800594e:	4639      	mov	r1, r7
 8005950:	f7fb f8f8 	bl	8000b44 <__aeabi_dcmpge>
 8005954:	b1f8      	cbz	r0, 8005996 <__kernel_rem_pio2+0x45e>
 8005956:	2200      	movs	r2, #0
 8005958:	4b96      	ldr	r3, [pc, #600]	; (8005bb4 <__kernel_rem_pio2+0x67c>)
 800595a:	4630      	mov	r0, r6
 800595c:	4639      	mov	r1, r7
 800595e:	f7fa fe6b 	bl	8000638 <__aeabi_dmul>
 8005962:	f7fb f903 	bl	8000b6c <__aeabi_d2iz>
 8005966:	4680      	mov	r8, r0
 8005968:	f7fa fdfc 	bl	8000564 <__aeabi_i2d>
 800596c:	2200      	movs	r2, #0
 800596e:	4b90      	ldr	r3, [pc, #576]	; (8005bb0 <__kernel_rem_pio2+0x678>)
 8005970:	f7fa fe62 	bl	8000638 <__aeabi_dmul>
 8005974:	460b      	mov	r3, r1
 8005976:	4602      	mov	r2, r0
 8005978:	4639      	mov	r1, r7
 800597a:	4630      	mov	r0, r6
 800597c:	f7fa fca4 	bl	80002c8 <__aeabi_dsub>
 8005980:	f7fb f8f4 	bl	8000b6c <__aeabi_d2iz>
 8005984:	1c65      	adds	r5, r4, #1
 8005986:	ab0e      	add	r3, sp, #56	; 0x38
 8005988:	f10a 0a18 	add.w	sl, sl, #24
 800598c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005990:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005994:	e719      	b.n	80057ca <__kernel_rem_pio2+0x292>
 8005996:	4630      	mov	r0, r6
 8005998:	4639      	mov	r1, r7
 800599a:	f7fb f8e7 	bl	8000b6c <__aeabi_d2iz>
 800599e:	ab0e      	add	r3, sp, #56	; 0x38
 80059a0:	4625      	mov	r5, r4
 80059a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80059a6:	e710      	b.n	80057ca <__kernel_rem_pio2+0x292>
 80059a8:	ab0e      	add	r3, sp, #56	; 0x38
 80059aa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80059ae:	f7fa fdd9 	bl	8000564 <__aeabi_i2d>
 80059b2:	4642      	mov	r2, r8
 80059b4:	464b      	mov	r3, r9
 80059b6:	f7fa fe3f 	bl	8000638 <__aeabi_dmul>
 80059ba:	2200      	movs	r2, #0
 80059bc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80059c0:	4b7c      	ldr	r3, [pc, #496]	; (8005bb4 <__kernel_rem_pio2+0x67c>)
 80059c2:	4640      	mov	r0, r8
 80059c4:	4649      	mov	r1, r9
 80059c6:	f7fa fe37 	bl	8000638 <__aeabi_dmul>
 80059ca:	3f01      	subs	r7, #1
 80059cc:	4680      	mov	r8, r0
 80059ce:	4689      	mov	r9, r1
 80059d0:	e708      	b.n	80057e4 <__kernel_rem_pio2+0x2ac>
 80059d2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80059d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059da:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80059de:	f7fa fe2b 	bl	8000638 <__aeabi_dmul>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4640      	mov	r0, r8
 80059e8:	4649      	mov	r1, r9
 80059ea:	f7fa fc6f 	bl	80002cc <__adddf3>
 80059ee:	3701      	adds	r7, #1
 80059f0:	4680      	mov	r8, r0
 80059f2:	4689      	mov	r9, r1
 80059f4:	9b04      	ldr	r3, [sp, #16]
 80059f6:	429f      	cmp	r7, r3
 80059f8:	dc01      	bgt.n	80059fe <__kernel_rem_pio2+0x4c6>
 80059fa:	45ba      	cmp	sl, r7
 80059fc:	dae9      	bge.n	80059d2 <__kernel_rem_pio2+0x49a>
 80059fe:	ab4a      	add	r3, sp, #296	; 0x128
 8005a00:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a04:	e9c3 8900 	strd	r8, r9, [r3]
 8005a08:	f10a 0a01 	add.w	sl, sl, #1
 8005a0c:	3e08      	subs	r6, #8
 8005a0e:	e6f0      	b.n	80057f2 <__kernel_rem_pio2+0x2ba>
 8005a10:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d85b      	bhi.n	8005ace <__kernel_rem_pio2+0x596>
 8005a16:	e8df f003 	tbb	[pc, r3]
 8005a1a:	264a      	.short	0x264a
 8005a1c:	0226      	.short	0x0226
 8005a1e:	ab9a      	add	r3, sp, #616	; 0x268
 8005a20:	441c      	add	r4, r3
 8005a22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005a26:	46a2      	mov	sl, r4
 8005a28:	46ab      	mov	fp, r5
 8005a2a:	f1bb 0f00 	cmp.w	fp, #0
 8005a2e:	dc6c      	bgt.n	8005b0a <__kernel_rem_pio2+0x5d2>
 8005a30:	46a2      	mov	sl, r4
 8005a32:	46ab      	mov	fp, r5
 8005a34:	f1bb 0f01 	cmp.w	fp, #1
 8005a38:	f300 8086 	bgt.w	8005b48 <__kernel_rem_pio2+0x610>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	2100      	movs	r1, #0
 8005a40:	2d01      	cmp	r5, #1
 8005a42:	f300 80a0 	bgt.w	8005b86 <__kernel_rem_pio2+0x64e>
 8005a46:	9b02      	ldr	r3, [sp, #8]
 8005a48:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005a4c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 809e 	bne.w	8005b92 <__kernel_rem_pio2+0x65a>
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	e9c3 7800 	strd	r7, r8, [r3]
 8005a5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005a60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005a64:	e033      	b.n	8005ace <__kernel_rem_pio2+0x596>
 8005a66:	3408      	adds	r4, #8
 8005a68:	ab4a      	add	r3, sp, #296	; 0x128
 8005a6a:	441c      	add	r4, r3
 8005a6c:	462e      	mov	r6, r5
 8005a6e:	2000      	movs	r0, #0
 8005a70:	2100      	movs	r1, #0
 8005a72:	2e00      	cmp	r6, #0
 8005a74:	da3a      	bge.n	8005aec <__kernel_rem_pio2+0x5b4>
 8005a76:	9b02      	ldr	r3, [sp, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d03d      	beq.n	8005af8 <__kernel_rem_pio2+0x5c0>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a82:	9c01      	ldr	r4, [sp, #4]
 8005a84:	e9c4 2300 	strd	r2, r3, [r4]
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005a90:	f7fa fc1a 	bl	80002c8 <__aeabi_dsub>
 8005a94:	ae4c      	add	r6, sp, #304	; 0x130
 8005a96:	2401      	movs	r4, #1
 8005a98:	42a5      	cmp	r5, r4
 8005a9a:	da30      	bge.n	8005afe <__kernel_rem_pio2+0x5c6>
 8005a9c:	9b02      	ldr	r3, [sp, #8]
 8005a9e:	b113      	cbz	r3, 8005aa6 <__kernel_rem_pio2+0x56e>
 8005aa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	9b01      	ldr	r3, [sp, #4]
 8005aa8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005aac:	e00f      	b.n	8005ace <__kernel_rem_pio2+0x596>
 8005aae:	ab9a      	add	r3, sp, #616	; 0x268
 8005ab0:	441c      	add	r4, r3
 8005ab2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	2100      	movs	r1, #0
 8005aba:	2d00      	cmp	r5, #0
 8005abc:	da10      	bge.n	8005ae0 <__kernel_rem_pio2+0x5a8>
 8005abe:	9b02      	ldr	r3, [sp, #8]
 8005ac0:	b113      	cbz	r3, 8005ac8 <__kernel_rem_pio2+0x590>
 8005ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	9b01      	ldr	r3, [sp, #4]
 8005aca:	e9c3 0100 	strd	r0, r1, [r3]
 8005ace:	9b06      	ldr	r3, [sp, #24]
 8005ad0:	f003 0007 	and.w	r0, r3, #7
 8005ad4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005ad8:	ecbd 8b02 	vpop	{d8}
 8005adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005ae4:	f7fa fbf2 	bl	80002cc <__adddf3>
 8005ae8:	3d01      	subs	r5, #1
 8005aea:	e7e6      	b.n	8005aba <__kernel_rem_pio2+0x582>
 8005aec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005af0:	f7fa fbec 	bl	80002cc <__adddf3>
 8005af4:	3e01      	subs	r6, #1
 8005af6:	e7bc      	b.n	8005a72 <__kernel_rem_pio2+0x53a>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e7c1      	b.n	8005a82 <__kernel_rem_pio2+0x54a>
 8005afe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005b02:	f7fa fbe3 	bl	80002cc <__adddf3>
 8005b06:	3401      	adds	r4, #1
 8005b08:	e7c6      	b.n	8005a98 <__kernel_rem_pio2+0x560>
 8005b0a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005b0e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005b12:	4640      	mov	r0, r8
 8005b14:	ec53 2b17 	vmov	r2, r3, d7
 8005b18:	4649      	mov	r1, r9
 8005b1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005b1e:	f7fa fbd5 	bl	80002cc <__adddf3>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4606      	mov	r6, r0
 8005b28:	460f      	mov	r7, r1
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	f7fa fbcb 	bl	80002c8 <__aeabi_dsub>
 8005b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b36:	f7fa fbc9 	bl	80002cc <__adddf3>
 8005b3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b3e:	e9ca 0100 	strd	r0, r1, [sl]
 8005b42:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005b46:	e770      	b.n	8005a2a <__kernel_rem_pio2+0x4f2>
 8005b48:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005b4c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005b50:	4630      	mov	r0, r6
 8005b52:	ec53 2b17 	vmov	r2, r3, d7
 8005b56:	4639      	mov	r1, r7
 8005b58:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005b5c:	f7fa fbb6 	bl	80002cc <__adddf3>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4680      	mov	r8, r0
 8005b66:	4689      	mov	r9, r1
 8005b68:	4630      	mov	r0, r6
 8005b6a:	4639      	mov	r1, r7
 8005b6c:	f7fa fbac 	bl	80002c8 <__aeabi_dsub>
 8005b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b74:	f7fa fbaa 	bl	80002cc <__adddf3>
 8005b78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b7c:	e9ca 0100 	strd	r0, r1, [sl]
 8005b80:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005b84:	e756      	b.n	8005a34 <__kernel_rem_pio2+0x4fc>
 8005b86:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005b8a:	f7fa fb9f 	bl	80002cc <__adddf3>
 8005b8e:	3d01      	subs	r5, #1
 8005b90:	e756      	b.n	8005a40 <__kernel_rem_pio2+0x508>
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	9a01      	ldr	r2, [sp, #4]
 8005b96:	601f      	str	r7, [r3, #0]
 8005b98:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005b9c:	605c      	str	r4, [r3, #4]
 8005b9e:	609d      	str	r5, [r3, #8]
 8005ba0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ba4:	60d3      	str	r3, [r2, #12]
 8005ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005baa:	6110      	str	r0, [r2, #16]
 8005bac:	6153      	str	r3, [r2, #20]
 8005bae:	e78e      	b.n	8005ace <__kernel_rem_pio2+0x596>
 8005bb0:	41700000 	.word	0x41700000
 8005bb4:	3e700000 	.word	0x3e700000

08005bb8 <__kernel_sin>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	ec55 4b10 	vmov	r4, r5, d0
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005bc6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005bca:	ed8d 1b00 	vstr	d1, [sp]
 8005bce:	9002      	str	r0, [sp, #8]
 8005bd0:	da06      	bge.n	8005be0 <__kernel_sin+0x28>
 8005bd2:	ee10 0a10 	vmov	r0, s0
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa ffc8 	bl	8000b6c <__aeabi_d2iz>
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d051      	beq.n	8005c84 <__kernel_sin+0xcc>
 8005be0:	4622      	mov	r2, r4
 8005be2:	462b      	mov	r3, r5
 8005be4:	4620      	mov	r0, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	f7fa fd26 	bl	8000638 <__aeabi_dmul>
 8005bec:	4682      	mov	sl, r0
 8005bee:	468b      	mov	fp, r1
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	f7fa fd1e 	bl	8000638 <__aeabi_dmul>
 8005bfc:	a341      	add	r3, pc, #260	; (adr r3, 8005d04 <__kernel_sin+0x14c>)
 8005bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c02:	4680      	mov	r8, r0
 8005c04:	4689      	mov	r9, r1
 8005c06:	4650      	mov	r0, sl
 8005c08:	4659      	mov	r1, fp
 8005c0a:	f7fa fd15 	bl	8000638 <__aeabi_dmul>
 8005c0e:	a33f      	add	r3, pc, #252	; (adr r3, 8005d0c <__kernel_sin+0x154>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa fb58 	bl	80002c8 <__aeabi_dsub>
 8005c18:	4652      	mov	r2, sl
 8005c1a:	465b      	mov	r3, fp
 8005c1c:	f7fa fd0c 	bl	8000638 <__aeabi_dmul>
 8005c20:	a33c      	add	r3, pc, #240	; (adr r3, 8005d14 <__kernel_sin+0x15c>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	f7fa fb51 	bl	80002cc <__adddf3>
 8005c2a:	4652      	mov	r2, sl
 8005c2c:	465b      	mov	r3, fp
 8005c2e:	f7fa fd03 	bl	8000638 <__aeabi_dmul>
 8005c32:	a33a      	add	r3, pc, #232	; (adr r3, 8005d1c <__kernel_sin+0x164>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fb46 	bl	80002c8 <__aeabi_dsub>
 8005c3c:	4652      	mov	r2, sl
 8005c3e:	465b      	mov	r3, fp
 8005c40:	f7fa fcfa 	bl	8000638 <__aeabi_dmul>
 8005c44:	a337      	add	r3, pc, #220	; (adr r3, 8005d24 <__kernel_sin+0x16c>)
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	f7fa fb3f 	bl	80002cc <__adddf3>
 8005c4e:	9b02      	ldr	r3, [sp, #8]
 8005c50:	4606      	mov	r6, r0
 8005c52:	460f      	mov	r7, r1
 8005c54:	b9db      	cbnz	r3, 8005c8e <__kernel_sin+0xd6>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	4659      	mov	r1, fp
 8005c5e:	f7fa fceb 	bl	8000638 <__aeabi_dmul>
 8005c62:	a325      	add	r3, pc, #148	; (adr r3, 8005cf8 <__kernel_sin+0x140>)
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fb2e 	bl	80002c8 <__aeabi_dsub>
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	f7fa fce2 	bl	8000638 <__aeabi_dmul>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f7fa fb26 	bl	80002cc <__adddf3>
 8005c80:	4604      	mov	r4, r0
 8005c82:	460d      	mov	r5, r1
 8005c84:	ec45 4b10 	vmov	d0, r4, r5
 8005c88:	b005      	add	sp, #20
 8005c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4b1b      	ldr	r3, [pc, #108]	; (8005d00 <__kernel_sin+0x148>)
 8005c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c96:	f7fa fccf 	bl	8000638 <__aeabi_dmul>
 8005c9a:	4632      	mov	r2, r6
 8005c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	f7fa fcc7 	bl	8000638 <__aeabi_dmul>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb2:	f7fa fb09 	bl	80002c8 <__aeabi_dsub>
 8005cb6:	4652      	mov	r2, sl
 8005cb8:	465b      	mov	r3, fp
 8005cba:	f7fa fcbd 	bl	8000638 <__aeabi_dmul>
 8005cbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cc2:	f7fa fb01 	bl	80002c8 <__aeabi_dsub>
 8005cc6:	a30c      	add	r3, pc, #48	; (adr r3, 8005cf8 <__kernel_sin+0x140>)
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	4606      	mov	r6, r0
 8005cce:	460f      	mov	r7, r1
 8005cd0:	4640      	mov	r0, r8
 8005cd2:	4649      	mov	r1, r9
 8005cd4:	f7fa fcb0 	bl	8000638 <__aeabi_dmul>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4630      	mov	r0, r6
 8005cde:	4639      	mov	r1, r7
 8005ce0:	f7fa faf4 	bl	80002cc <__adddf3>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4620      	mov	r0, r4
 8005cea:	4629      	mov	r1, r5
 8005cec:	f7fa faec 	bl	80002c8 <__aeabi_dsub>
 8005cf0:	e7c6      	b.n	8005c80 <__kernel_sin+0xc8>
 8005cf2:	bf00      	nop
 8005cf4:	f3af 8000 	nop.w
 8005cf8:	55555549 	.word	0x55555549
 8005cfc:	3fc55555 	.word	0x3fc55555
 8005d00:	3fe00000 	.word	0x3fe00000
 8005d04:	5acfd57c 	.word	0x5acfd57c
 8005d08:	3de5d93a 	.word	0x3de5d93a
 8005d0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005d10:	3e5ae5e6 	.word	0x3e5ae5e6
 8005d14:	57b1fe7d 	.word	0x57b1fe7d
 8005d18:	3ec71de3 	.word	0x3ec71de3
 8005d1c:	19c161d5 	.word	0x19c161d5
 8005d20:	3f2a01a0 	.word	0x3f2a01a0
 8005d24:	1110f8a6 	.word	0x1110f8a6
 8005d28:	3f811111 	.word	0x3f811111

08005d2c <fabs>:
 8005d2c:	ec51 0b10 	vmov	r0, r1, d0
 8005d30:	ee10 2a10 	vmov	r2, s0
 8005d34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d38:	ec43 2b10 	vmov	d0, r2, r3
 8005d3c:	4770      	bx	lr
	...

08005d40 <floor>:
 8005d40:	ec51 0b10 	vmov	r0, r1, d0
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005d4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005d50:	2e13      	cmp	r6, #19
 8005d52:	460c      	mov	r4, r1
 8005d54:	ee10 5a10 	vmov	r5, s0
 8005d58:	4680      	mov	r8, r0
 8005d5a:	dc34      	bgt.n	8005dc6 <floor+0x86>
 8005d5c:	2e00      	cmp	r6, #0
 8005d5e:	da16      	bge.n	8005d8e <floor+0x4e>
 8005d60:	a335      	add	r3, pc, #212	; (adr r3, 8005e38 <floor+0xf8>)
 8005d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d66:	f7fa fab1 	bl	80002cc <__adddf3>
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f7fa fef3 	bl	8000b58 <__aeabi_dcmpgt>
 8005d72:	b148      	cbz	r0, 8005d88 <floor+0x48>
 8005d74:	2c00      	cmp	r4, #0
 8005d76:	da59      	bge.n	8005e2c <floor+0xec>
 8005d78:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005d7c:	4a30      	ldr	r2, [pc, #192]	; (8005e40 <floor+0x100>)
 8005d7e:	432b      	orrs	r3, r5
 8005d80:	2500      	movs	r5, #0
 8005d82:	42ab      	cmp	r3, r5
 8005d84:	bf18      	it	ne
 8005d86:	4614      	movne	r4, r2
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	e025      	b.n	8005dda <floor+0x9a>
 8005d8e:	4f2d      	ldr	r7, [pc, #180]	; (8005e44 <floor+0x104>)
 8005d90:	4137      	asrs	r7, r6
 8005d92:	ea01 0307 	and.w	r3, r1, r7
 8005d96:	4303      	orrs	r3, r0
 8005d98:	d01f      	beq.n	8005dda <floor+0x9a>
 8005d9a:	a327      	add	r3, pc, #156	; (adr r3, 8005e38 <floor+0xf8>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa fa94 	bl	80002cc <__adddf3>
 8005da4:	2200      	movs	r2, #0
 8005da6:	2300      	movs	r3, #0
 8005da8:	f7fa fed6 	bl	8000b58 <__aeabi_dcmpgt>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d0eb      	beq.n	8005d88 <floor+0x48>
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	bfbe      	ittt	lt
 8005db4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005db8:	fa43 f606 	asrlt.w	r6, r3, r6
 8005dbc:	19a4      	addlt	r4, r4, r6
 8005dbe:	ea24 0407 	bic.w	r4, r4, r7
 8005dc2:	2500      	movs	r5, #0
 8005dc4:	e7e0      	b.n	8005d88 <floor+0x48>
 8005dc6:	2e33      	cmp	r6, #51	; 0x33
 8005dc8:	dd0b      	ble.n	8005de2 <floor+0xa2>
 8005dca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005dce:	d104      	bne.n	8005dda <floor+0x9a>
 8005dd0:	ee10 2a10 	vmov	r2, s0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	f7fa fa79 	bl	80002cc <__adddf3>
 8005dda:	ec41 0b10 	vmov	d0, r0, r1
 8005dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005de6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dea:	fa23 f707 	lsr.w	r7, r3, r7
 8005dee:	4207      	tst	r7, r0
 8005df0:	d0f3      	beq.n	8005dda <floor+0x9a>
 8005df2:	a311      	add	r3, pc, #68	; (adr r3, 8005e38 <floor+0xf8>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	f7fa fa68 	bl	80002cc <__adddf3>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f7fa feaa 	bl	8000b58 <__aeabi_dcmpgt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	d0bf      	beq.n	8005d88 <floor+0x48>
 8005e08:	2c00      	cmp	r4, #0
 8005e0a:	da02      	bge.n	8005e12 <floor+0xd2>
 8005e0c:	2e14      	cmp	r6, #20
 8005e0e:	d103      	bne.n	8005e18 <floor+0xd8>
 8005e10:	3401      	adds	r4, #1
 8005e12:	ea25 0507 	bic.w	r5, r5, r7
 8005e16:	e7b7      	b.n	8005d88 <floor+0x48>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005e1e:	fa03 f606 	lsl.w	r6, r3, r6
 8005e22:	4435      	add	r5, r6
 8005e24:	4545      	cmp	r5, r8
 8005e26:	bf38      	it	cc
 8005e28:	18e4      	addcc	r4, r4, r3
 8005e2a:	e7f2      	b.n	8005e12 <floor+0xd2>
 8005e2c:	2500      	movs	r5, #0
 8005e2e:	462c      	mov	r4, r5
 8005e30:	e7aa      	b.n	8005d88 <floor+0x48>
 8005e32:	bf00      	nop
 8005e34:	f3af 8000 	nop.w
 8005e38:	8800759c 	.word	0x8800759c
 8005e3c:	7e37e43c 	.word	0x7e37e43c
 8005e40:	bff00000 	.word	0xbff00000
 8005e44:	000fffff 	.word	0x000fffff

08005e48 <scalbn>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	ec55 4b10 	vmov	r4, r5, d0
 8005e4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005e52:	4606      	mov	r6, r0
 8005e54:	462b      	mov	r3, r5
 8005e56:	b9aa      	cbnz	r2, 8005e84 <scalbn+0x3c>
 8005e58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e5c:	4323      	orrs	r3, r4
 8005e5e:	d03b      	beq.n	8005ed8 <scalbn+0x90>
 8005e60:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <scalbn+0xe0>)
 8005e62:	4629      	mov	r1, r5
 8005e64:	2200      	movs	r2, #0
 8005e66:	ee10 0a10 	vmov	r0, s0
 8005e6a:	f7fa fbe5 	bl	8000638 <__aeabi_dmul>
 8005e6e:	4b2f      	ldr	r3, [pc, #188]	; (8005f2c <scalbn+0xe4>)
 8005e70:	429e      	cmp	r6, r3
 8005e72:	4604      	mov	r4, r0
 8005e74:	460d      	mov	r5, r1
 8005e76:	da12      	bge.n	8005e9e <scalbn+0x56>
 8005e78:	a327      	add	r3, pc, #156	; (adr r3, 8005f18 <scalbn+0xd0>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fbdb 	bl	8000638 <__aeabi_dmul>
 8005e82:	e009      	b.n	8005e98 <scalbn+0x50>
 8005e84:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005e88:	428a      	cmp	r2, r1
 8005e8a:	d10c      	bne.n	8005ea6 <scalbn+0x5e>
 8005e8c:	ee10 2a10 	vmov	r2, s0
 8005e90:	4620      	mov	r0, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	f7fa fa1a 	bl	80002cc <__adddf3>
 8005e98:	4604      	mov	r4, r0
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	e01c      	b.n	8005ed8 <scalbn+0x90>
 8005e9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	3a36      	subs	r2, #54	; 0x36
 8005ea6:	4432      	add	r2, r6
 8005ea8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005eac:	428a      	cmp	r2, r1
 8005eae:	dd0b      	ble.n	8005ec8 <scalbn+0x80>
 8005eb0:	ec45 4b11 	vmov	d1, r4, r5
 8005eb4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005f20 <scalbn+0xd8>
 8005eb8:	f000 f83c 	bl	8005f34 <copysign>
 8005ebc:	a318      	add	r3, pc, #96	; (adr r3, 8005f20 <scalbn+0xd8>)
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	ec51 0b10 	vmov	r0, r1, d0
 8005ec6:	e7da      	b.n	8005e7e <scalbn+0x36>
 8005ec8:	2a00      	cmp	r2, #0
 8005eca:	dd08      	ble.n	8005ede <scalbn+0x96>
 8005ecc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ed0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ed4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ed8:	ec45 4b10 	vmov	d0, r4, r5
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005ee2:	da0d      	bge.n	8005f00 <scalbn+0xb8>
 8005ee4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005ee8:	429e      	cmp	r6, r3
 8005eea:	ec45 4b11 	vmov	d1, r4, r5
 8005eee:	dce1      	bgt.n	8005eb4 <scalbn+0x6c>
 8005ef0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005f18 <scalbn+0xd0>
 8005ef4:	f000 f81e 	bl	8005f34 <copysign>
 8005ef8:	a307      	add	r3, pc, #28	; (adr r3, 8005f18 <scalbn+0xd0>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	e7e0      	b.n	8005ec2 <scalbn+0x7a>
 8005f00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f04:	3236      	adds	r2, #54	; 0x36
 8005f06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005f0e:	4620      	mov	r0, r4
 8005f10:	4629      	mov	r1, r5
 8005f12:	2200      	movs	r2, #0
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <scalbn+0xe8>)
 8005f16:	e7b2      	b.n	8005e7e <scalbn+0x36>
 8005f18:	c2f8f359 	.word	0xc2f8f359
 8005f1c:	01a56e1f 	.word	0x01a56e1f
 8005f20:	8800759c 	.word	0x8800759c
 8005f24:	7e37e43c 	.word	0x7e37e43c
 8005f28:	43500000 	.word	0x43500000
 8005f2c:	ffff3cb0 	.word	0xffff3cb0
 8005f30:	3c900000 	.word	0x3c900000

08005f34 <copysign>:
 8005f34:	ec51 0b10 	vmov	r0, r1, d0
 8005f38:	ee11 0a90 	vmov	r0, s3
 8005f3c:	ee10 2a10 	vmov	r2, s0
 8005f40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005f44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005f48:	ea41 0300 	orr.w	r3, r1, r0
 8005f4c:	ec43 2b10 	vmov	d0, r2, r3
 8005f50:	4770      	bx	lr
	...

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
